Help on module pypylon.pylon in pypylon:

NAME
    pypylon.pylon

DESCRIPTION
    Copyright (C) 2017-2018 Basler AG
    Redistribution and use in source and binary forms, with or without modification,
    are permitted provided that the following conditions are met:
        1. Redistributions of source code must retain the above copyright notice,
           this list of conditions and the following disclaimer.
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        3. Neither the name of the copyright holder nor the names of its contributors
           may be used to endorse or promote products derived from this software
           without specific prior written permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
    OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
    ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

CLASSES
    builtins.Exception(builtins.BaseException)
        _genicam.GenericException
            _genicam.AccessException
            _genicam.BadAllocException
            _genicam.DynamicCastException
            _genicam.InvalidArgumentException
            _genicam.LogicalErrorException
            _genicam.OutOfRangeException
            _genicam.PropertyException
            _genicam.RuntimeException
            _genicam.TimeoutException
    builtins.object
        CameraEventHandler
        ConfigurationEventHandler
            AcquireContinuousConfiguration
            AcquireSingleFrameConfiguration
            SoftwareTriggerConfiguration
        FeaturePersistence
        GrabResult
        GrabResultData
        IProperties
            CInfoBase
                DeviceInfo
                TlInfo
        Image
            IReusableImage
                PylonImageBase
                    PylonImage
        ImageEventHandler
        ImageFormatConverterParams_Params
            ImageFormatConverter
        ImagePersistenceOptions
        InstantCameraArray
        InstantCameraParams_Params
            InstantCamera
        PylonImageWindow
        TlFactory
        TransportLayer
        WaitObject
        WaitObjects
    
    class AccessException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      AccessException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class AcquireContinuousConfiguration(ConfigurationEventHandler)
     |  Changes the configuration of the camera to free-running continuous acquisition.  
     |  
     |  The `CAcquireContinuousConfiguration` is the default configuration of the
     |  Instant Camera class. The CAcquireContinuousConfiguration is automatically
     |  registered when an Instant Camera object is created.  
     |  
     |  This instant camera configuration is provided as header-only file. The code can
     |  be copied and modified for creating own configuration classes.  
     |  
     |  C++ includes: AcquireContinuousConfiguration.h
     |  
     |  Method resolution order:
     |      AcquireContinuousConfiguration
     |      ConfigurationEventHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  OnOpened(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |      Copy.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ApplyConfiguration(nodemap: 'INodeMap') -> 'void'
     |      Apply acquire continuous configuration.
     |  
     |  __swig_destroy__ = delete_AcquireContinuousConfiguration(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ConfigurationEventHandler:
     |  
     |  DestroyConfiguration(self) -> 'void'
     |      Destroys the configuration event handler.  
     |      
     |      C++ exceptions from this call will be caught and ignored.
     |  
     |  OnAttach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a Pylon Device (Pylon::IPylonDevice) is attached by
     |      calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnAttached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a Pylon Device (Pylon::IPylonDevice) has been
     |      attached by calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnCameraDeviceRemoved(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when a camera device removal from the PC has been
     |      detected.  
     |      
     |      The Pylon Device attached to the Instant Camera is not operable after this
     |      event. After it is made sure that no access to the Pylon Device or any of its
     |      node maps is made anymore the Pylon Device should be destroyed using
     |      InstantCamera::DeviceDestroy(). The access to the Pylon Device can be protected
     |      using the lock provided by GetLock(), e.g. when accessing parameters.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object from an additional
     |      thread.
     |  
     |  OnClose(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is closed.  
     |      
     |      Camera Close must not be called from here or from subsequent calls to avoid
     |      infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnClosed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been closed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnConfigurationDeregistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been
     |      deregistered.  
     |      
     |      The configuration event handler is automatically deregistered when the Instant
     |      Camera object is destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored.  This method is called
     |      inside the lock of the camera object.
     |  
     |  OnConfigurationRegistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been registered.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through.  This method is called inside
     |      the lock of the camera object.
     |  
     |  OnDestroy(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is destroyed.  
     |      
     |      Camera DestroyDevice must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDestroyed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is detached from the
     |      Instant Camera object.  
     |      
     |      The camera's Detach() method must not be called from here or from subsequent
     |      calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been detached from the
     |      Instant Camera object.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabError(self, camera: 'InstantCamera', errorMessage: 'char const *') -> 'void'
     |      This method is called when an exception has been triggered during grabbing.  
     |      
     |      An exception has been triggered by a grab thread. The grab will be stopped after
     |      this event call.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `errorMessage` :  
     |          The message of the exception that signaled an error during grabbing.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStart(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is started.  
     |      
     |      Camera StartGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStarted(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been started.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStop(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is stopped.  
     |      
     |      Camera StopGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStopped(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been stopped.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnOpen(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __disown__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigurationEventHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class AcquireSingleFrameConfiguration(ConfigurationEventHandler)
     |  An instant camera configuration for single frame acquisition, Use together with
     |  CInstantCamera::GrabOne() only.  
     |  
     |  The CAcquireSingleFrameConfiguration is provided as header-only file. The code
     |  can be copied and modified for creating own configuration classes.  
     |  
     |  note: Grabbing single images using Software Trigger
     |      (CSoftwareTriggerConfiguration) is recommended if you want to maximize frame
     |      rate. This is because the overhead per grabbed image is reduced compared to
     |      Single Frame Acquisition. The grabbing can be started using
     |      CInstantCamera::StartGrabbing(). Images are grabbed using the
     |      CInstantCamera::WaitForFrameTriggerReady(),
     |      CInstantCamera::ExecuteSoftwareTrigger() and
     |      CInstantCamera::RetrieveResult() methods instead of using
     |      CInstantCamera::GrabOne(). The grab can be stopped using
     |      CInstantCamera::StopGrabbing() when done.  
     |  
     |  C++ includes: AcquireSingleFrameConfiguration.h
     |  
     |  Method resolution order:
     |      AcquireSingleFrameConfiguration
     |      ConfigurationEventHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  OnOpened(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |      Copy.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ApplyConfiguration(nodemap: 'INodeMap') -> 'void'
     |      Apply acquire single frame configuration.
     |  
     |  __swig_destroy__ = delete_AcquireSingleFrameConfiguration(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ConfigurationEventHandler:
     |  
     |  DestroyConfiguration(self) -> 'void'
     |      Destroys the configuration event handler.  
     |      
     |      C++ exceptions from this call will be caught and ignored.
     |  
     |  OnAttach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a Pylon Device (Pylon::IPylonDevice) is attached by
     |      calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnAttached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a Pylon Device (Pylon::IPylonDevice) has been
     |      attached by calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnCameraDeviceRemoved(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when a camera device removal from the PC has been
     |      detected.  
     |      
     |      The Pylon Device attached to the Instant Camera is not operable after this
     |      event. After it is made sure that no access to the Pylon Device or any of its
     |      node maps is made anymore the Pylon Device should be destroyed using
     |      InstantCamera::DeviceDestroy(). The access to the Pylon Device can be protected
     |      using the lock provided by GetLock(), e.g. when accessing parameters.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object from an additional
     |      thread.
     |  
     |  OnClose(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is closed.  
     |      
     |      Camera Close must not be called from here or from subsequent calls to avoid
     |      infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnClosed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been closed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnConfigurationDeregistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been
     |      deregistered.  
     |      
     |      The configuration event handler is automatically deregistered when the Instant
     |      Camera object is destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored.  This method is called
     |      inside the lock of the camera object.
     |  
     |  OnConfigurationRegistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been registered.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through.  This method is called inside
     |      the lock of the camera object.
     |  
     |  OnDestroy(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is destroyed.  
     |      
     |      Camera DestroyDevice must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDestroyed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is detached from the
     |      Instant Camera object.  
     |      
     |      The camera's Detach() method must not be called from here or from subsequent
     |      calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been detached from the
     |      Instant Camera object.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabError(self, camera: 'InstantCamera', errorMessage: 'char const *') -> 'void'
     |      This method is called when an exception has been triggered during grabbing.  
     |      
     |      An exception has been triggered by a grab thread. The grab will be stopped after
     |      this event call.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `errorMessage` :  
     |          The message of the exception that signaled an error during grabbing.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStart(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is started.  
     |      
     |      Camera StartGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStarted(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been started.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStop(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is stopped.  
     |      
     |      Camera StopGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStopped(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been stopped.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnOpen(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __disown__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigurationEventHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BadAllocException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      BadAllocException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    CDeviceInfo = class DeviceInfo(CInfoBase)
     |  CDeviceInfo(*args)
     |  
     |  Holds information about an enumerated device.  
     |  
     |  The device enumeration process creates a list of CDeviceInfo objects
     |  (Pylon::DeviceInfoList_t). Each CDeviceInfo objects stores information about a
     |  device. The information is retrieved during the device enumeration process
     |  (ITransportLayer::EnumerateDevices resp. CTlFactory::EnumerateDevices)  
     |  
     |  C++ includes: DeviceInfo.h
     |  
     |  Method resolution order:
     |      DeviceInfo
     |      CInfoBase
     |      IProperties
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  GetAddress(self) -> 'Pylon::String_t'
     |  
     |  GetBconAdapterLibraryApiVersion(self) -> 'Pylon::String_t'
     |  
     |  GetBconAdapterLibraryName(self) -> 'Pylon::String_t'
     |  
     |  GetBconAdapterLibraryVersion(self) -> 'Pylon::String_t'
     |  
     |  GetDefaultGateway(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceFactory(self) -> 'Pylon::String_t'
     |      Retrieves the identifier for the transport layer able to create this device.
     |      This property is identified by Key::DeviceFactoryKey.
     |  
     |  GetDeviceGUID(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceID(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceIdx(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceSpecificString(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceVersion(self) -> 'Pylon::String_t'
     |      Retrieves the version string of the device. This property is identified by
     |      Key::DeviceVersionKey.
     |  
     |  GetDeviceXMLFileOverride(self) -> 'Pylon::String_t'
     |  
     |  GetDriverKeyName(self) -> 'Pylon::String_t'
     |  
     |  GetInitialBaudRate(self) -> 'Pylon::String_t'
     |  
     |  GetInterface(self) -> 'Pylon::String_t'
     |  
     |  GetInternalName(self) -> 'Pylon::String_t'
     |  
     |  GetIpAddress(self) -> 'Pylon::String_t'
     |  
     |  GetIpConfigCurrent(self) -> 'Pylon::String_t'
     |  
     |  GetIpConfigOptions(self) -> 'Pylon::String_t'
     |  
     |  GetMacAddress(self) -> 'Pylon::String_t'
     |  
     |  GetManufacturerInfo(self) -> 'Pylon::String_t'
     |  
     |  GetModelName(self) -> 'Pylon::String_t'
     |      Retrieves the model name of the device. This property is identified by
     |      Key::ModelNameKey.
     |  
     |  GetPortID(self) -> 'Pylon::String_t'
     |  
     |  GetPortNr(self) -> 'Pylon::String_t'
     |  
     |  GetPortSpecificString(self) -> 'Pylon::String_t'
     |  
     |  GetProductId(self) -> 'Pylon::String_t'
     |  
     |  GetSerialNumber(self) -> 'Pylon::String_t'
     |      Retrieves the serial number if it supported by the underlying implementation
     |      This property is identified by Key::SerialNumberKey.
     |  
     |  GetSubnetAddress(self) -> 'Pylon::String_t'
     |  
     |  GetSubnetMask(self) -> 'Pylon::String_t'
     |  
     |  GetSupportedBconAdapterApiVersion(self) -> 'Pylon::String_t'
     |  
     |  GetTransferMode(self) -> 'Pylon::String_t'
     |  
     |  GetUsbDriverType(self) -> 'Pylon::String_t'
     |  
     |  GetUserDefinedName(self) -> 'Pylon::String_t'
     |      Retrieves the user-defined name if present. This property is identified by
     |      Key::UserDefinedNameKey.
     |  
     |  GetVendorId(self) -> 'Pylon::String_t'
     |  
     |  GetXMLSource(self) -> 'Pylon::String_t'
     |      Retrieves the location where the XML file was loaded from. This property is
     |      identified by Key::XMLSourceKey. You must use the DeviceInfo of an opened
     |      IPylonDevice to retrieve this property.
     |  
     |  IsAddressAvailable(self) -> 'bool'
     |  
     |  IsAutoIpActive(self) -> 'bool'
     |  
     |  IsAutoIpSupported(self) -> 'bool'
     |  
     |  IsBconAdapterLibraryApiVersionAvailable(self) -> 'bool'
     |  
     |  IsBconAdapterLibraryNameAvailable(self) -> 'bool'
     |  
     |  IsBconAdapterLibraryVersionAvailable(self) -> 'bool'
     |  
     |  IsDefaultGatewayAvailable(self) -> 'bool'
     |  
     |  IsDeviceFactoryAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsDeviceGUIDAvailable(self) -> 'bool'
     |  
     |  IsDeviceIDAvailable(self) -> 'bool'
     |  
     |  IsDeviceIdxAvailable(self) -> 'bool'
     |  
     |  IsDeviceSpecificStringAvailable(self) -> 'bool'
     |  
     |  IsDeviceVersionAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsDeviceXMLFileOverrideAvailable(self) -> 'bool'
     |  
     |  IsDhcpActive(self) -> 'bool'
     |  
     |  IsDhcpSupported(self) -> 'bool'
     |  
     |  IsDriverKeyNameAvailable(self) -> 'bool'
     |  
     |  IsInitialBaudRateAvailable(self) -> 'bool'
     |  
     |  IsInterfaceAvailable(self) -> 'bool'
     |  
     |  IsInternalNameAvailable(self) -> 'bool'
     |  
     |  IsIpAddressAvailable(self) -> 'bool'
     |  
     |  IsIpConfigCurrentAvailable(self) -> 'bool'
     |  
     |  IsIpConfigOptionsAvailable(self) -> 'bool'
     |  
     |  IsMacAddressAvailable(self) -> 'bool'
     |  
     |  IsManufacturerInfoAvailable(self) -> 'bool'
     |  
     |  IsModelNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsPersistentIpActive(self) -> 'bool'
     |  
     |  IsPersistentIpSupported(self) -> 'bool'
     |  
     |  IsPortIDAvailable(self) -> 'bool'
     |  
     |  IsPortNrAvailable(self) -> 'bool'
     |  
     |  IsPortSpecificStringAvailable(self) -> 'bool'
     |  
     |  IsProductIdAvailable(self) -> 'bool'
     |  
     |  IsSerialNumberAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsSubnetAddressAvailable(self) -> 'bool'
     |  
     |  IsSubnetMaskAvailable(self) -> 'bool'
     |  
     |  IsSubset(self, Subset: 'IProperties') -> 'bool'
     |  
     |  IsSupportedBconAdapterApiVersionAvailable(self) -> 'bool'
     |  
     |  IsTransferModeAvailable(self) -> 'bool'
     |  
     |  IsUsbDriverTypeAvailable(self) -> 'bool'
     |  
     |  IsUserDefinedNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsVendorIdAvailable(self) -> 'bool'
     |  
     |  IsXMLSourceAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  SetAddress(self, AddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetBconAdapterLibraryApiVersion(self, BconAdapterLibraryApiVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetBconAdapterLibraryName(self, BconAdapterLibraryNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetBconAdapterLibraryVersion(self, BconAdapterLibraryVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDefaultGateway(self, DefaultGatewayValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDeviceClass(self, DeviceClassValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the device class device, e.g. Basler1394. This property is identified by
     |      Key::DeviceClassKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetDeviceFactory(self, DeviceFactoryValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetDeviceID(self, DeviceIDValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDeviceSpecificString(self, DeviceSpecificStringValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDeviceVersion(self, DeviceVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetDeviceXMLFileOverride(self, DeviceXMLFileOverrideValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetFriendlyName(self, FriendlyNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the display friendly name of the device. This property is identified by
     |      Key::FriendlyNameKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetFullName(self, FullNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the full name identifying the device. This property is identified by
     |      Key::FullNameKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetInitialBaudRate(self, InitialBaudRateValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetInterface(self, InterfaceValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetInternalName(self, InternalNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetIpAddress(self, IpAddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetIpConfigCurrent(self, IpConfigCurrentValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetIpConfigOptions(self, IpConfigOptionsValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetMacAddress(self, MacAddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetModelName(self, ModelNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetPortID(self, PortIDValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetPortNr(self, PortNrValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetPortSpecificString(self, PortSpecificStringValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetPropertyValue(self, Name: 'Pylon::String_t const &', Value: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Modifies a property value This method overrides a method of a base class
     |      returning a reference to CDeviceInfo
     |  
     |  SetSerialNumber(self, SerialNumberValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetSubnetAddress(self, SubnetAddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetSubnetMask(self, SubnetMaskValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetSupportedBconAdapterApiVersion(self, SupportedBconAdapterApiVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetUserDefinedName(self, UserDefinedNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetVendorName(self, VendorNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the vendor name of the device. This property is identified by
     |      Key::VendorNameKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetXMLSource(self, XMLSource: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args)
     |  
     |  __lt__(self, rhs: 'DeviceInfo') -> 'bool'
     |      Return self<value.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_DeviceInfo(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CInfoBase:
     |  
     |  GetDeviceClass(self) -> 'Pylon::String_t'
     |      Retrieves the device class device, e.g. Basler1394. This property is identified
     |      by Key::DeviceClassKey.
     |  
     |  GetFriendlyName(self) -> 'Pylon::String_t'
     |      Retrieves the human readable name of the device. This property is identified by
     |      Key::FriendlyNameKey.
     |  
     |  GetFullName(self) -> 'Pylon::String_t'
     |      Retrieves the full name identifying the device. This property is identified by
     |      Key::FullNameKey.
     |  
     |  GetPropertyAvailable(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetPropertyNames(self) -> 'int'
     |  
     |  GetPropertyValue(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetVendorName(self) -> 'Pylon::String_t'
     |      Retrieves the vendor name of the device. This property is identified by
     |      Key::VendorNameKey.
     |  
     |  IsDeviceClassAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFriendlyNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFullNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsUserProvided(self) -> 'bool'
     |  
     |  IsVendorNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  __eq__(self, rhs: 'CInfoBase') -> 'bool'
     |      Return self==value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from CInfoBase:
     |  
     |  GetPropertyNotAvailable() -> 'char const *'
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from CInfoBase:
     |  
     |  PropertyNotAvailable = 'N/A'
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from IProperties:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    CImageFormatConverterParams_Params = class ImageFormatConverterParams_Params(builtins.object)
     |  CImageFormatConverterParams_Params(*args, **kwargs)
     |  
     |  Interface to image format converter parameters.  
     |  
     |  C++ includes: _ImageFormatConverterParams.h
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  AdditionalLeftShift
     |  
     |  Gamma
     |  
     |  InconvertibleEdgeHandling
     |  
     |  MonoConversionMethod
     |  
     |  OutputBitAlignment
     |  
     |  OutputOrientation
     |  
     |  OutputPaddingX
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class CInfoBase(IProperties)
     |  CInfoBase(*args, **kwargs)
     |  
     |  Base implementation for PYLON info container.  
     |  
     |  Info container allow a generic access to implemented properties. All Properties
     |  and their values can be accessed without knowing them in advance. It is possible
     |  to enumerate all properties available and corresponding values. Properties and
     |  values are represented as String_t. The normal usage is to have enumerators that
     |  create the info objects and clients that read only.  
     |  
     |  If the type of the info object is known before client can use specific accessor
     |  function to retrieve the property values  
     |  
     |  C++ includes: Info.h
     |  
     |  Method resolution order:
     |      CInfoBase
     |      IProperties
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  GetDeviceClass(self) -> 'Pylon::String_t'
     |      Retrieves the device class device, e.g. Basler1394. This property is identified
     |      by Key::DeviceClassKey.
     |  
     |  GetFriendlyName(self) -> 'Pylon::String_t'
     |      Retrieves the human readable name of the device. This property is identified by
     |      Key::FriendlyNameKey.
     |  
     |  GetFullName(self) -> 'Pylon::String_t'
     |      Retrieves the full name identifying the device. This property is identified by
     |      Key::FullNameKey.
     |  
     |  GetPropertyAvailable(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetPropertyNames(self) -> 'int'
     |  
     |  GetPropertyValue(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetVendorName(self) -> 'Pylon::String_t'
     |      Retrieves the vendor name of the device. This property is identified by
     |      Key::VendorNameKey.
     |  
     |  IsDeviceClassAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFriendlyNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFullNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsSubset(self, Subset: 'IProperties') -> 'bool'
     |  
     |  IsUserProvided(self) -> 'bool'
     |  
     |  IsVendorNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  SetDeviceClass(self, DeviceClassValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  SetFriendlyName(self, FriendlyNameValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  SetFullName(self, FullNameValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  SetPropertyValue(self, Name: 'Pylon::String_t const &', Value: 'Pylon::String_t const &') -> 'Pylon::IProperties &'
     |  
     |  SetVendorName(self, VendorNameValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  __eq__(self, rhs: 'CInfoBase') -> 'bool'
     |      Return self==value.
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __lt__(self, rhs: 'CInfoBase') -> 'bool'
     |      Return self<value.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetPropertyNotAvailable() -> 'char const *'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  PropertyNotAvailable = 'N/A'
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IProperties:
     |  
     |  __del__ lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from IProperties:
     |  
     |  __swig_destroy__ = delete_IProperties(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from IProperties:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    CInstantCameraParams_Params = class InstantCameraParams_Params(builtins.object)
     |  CInstantCameraParams_Params(*args, **kwargs)
     |  
     |  Interface to instant camera parameters.  
     |  
     |  C++ includes: _InstantCameraParams.h
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ChunkNodeMapsEnable
     |  
     |  GrabCameraEvents
     |  
     |  GrabLoopThreadPriority
     |  
     |  GrabLoopThreadPriorityOverride
     |  
     |  GrabLoopThreadTimeout
     |  
     |  GrabLoopThreadUseTimeout
     |  
     |  InternalGrabEngineThreadPriority
     |  
     |  InternalGrabEngineThreadPriorityOverride
     |  
     |  MaxNumBuffer
     |  
     |  MaxNumGrabResults
     |  
     |  MaxNumQueuedBuffer
     |  
     |  MonitorModeActive
     |  
     |  NumEmptyBuffers
     |  
     |  NumQueuedBuffers
     |  
     |  NumReadyBuffers
     |  
     |  OutputQueueSize
     |  
     |  StaticChunkNodeMapPoolSize
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class CameraEventHandler(builtins.object)
     |  CameraEventHandler(*args)
     |  
     |  The camera event handler base class.  
     |  
     |  C++ includes: CameraEventHandler.h
     |  
     |  Methods defined here:
     |  
     |  DestroyCameraEventHandler(self) -> 'void'
     |      Destroys the camera event handler.  
     |      
     |      C++ exceptions from this call will be caught and ignored.
     |  
     |  OnCameraEvent(self, camera: 'InstantCamera', userProvidedId: 'intptr_t', pNode: 'INode') -> 'void'
     |      This method is called when a camera event has been received.  
     |      
     |      Only very short processing tasks should be performed by this method. Otherwise,
     |      the event notification will block the processing of images.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `userProvidedId` :  
     |          The ID passed when registering for the event. It can be used to distinguish
     |          between different events.  
     |      * `pNode` :  
     |          The node identified by node name when registering.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  This method is called outside the lock of the camera object, outside
     |      the lock of the node map, and inside the lock of the camera event handler
     |      registry.
     |  
     |  OnCameraEventHandlerDeregistered(self, camera: 'InstantCamera', nodeName: 'Pylon::String_t const &', userProvidedId: 'intptr_t') -> 'void'
     |      This method is called when the camera event handler has been deregistered.  
     |      
     |      The camera event handler is automatically deregistered when the Instant Camera
     |      object is destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `nodeName` :  
     |          The name of the event data node updated on camera event, e.g.
     |          "ExposureEndEventTimestamp" for exposure end event.  
     |      * `userProvidedId` :  
     |          This ID is passed as a parameter in CCameraEventHandler::OnCameraEvent and
     |          can be used to distinguish between different events.  
     |      
     |      C++ exceptions from this call will be caught and ignored.  This method is called
     |      inside the lock of the camera event handler registry.
     |  
     |  OnCameraEventHandlerRegistered(self, camera: 'InstantCamera', nodeName: 'Pylon::String_t const &', userProvidedId: 'intptr_t') -> 'void'
     |      This method is called when the camera event handler has been registered.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `nodeName` :  
     |          The name of the event data node updated on camera event, e.g.
     |          "ExposureEndEventTimestamp" for exposure end event.  
     |      * `userProvidedId` :  
     |          This ID is passed as a parameter in CCameraEventHandler::OnCameraEvent and
     |          can be used to distinguish between different events.  
     |      
     |      Exceptions from this call will propagate through.  This method is called inside
     |      the lock of the camera event handler registry.
     |  
     |  __del__ lambda self
     |  
     |  __disown__(self)
     |  
     |  __init__(self, *args)
     |      Copy.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_CameraEventHandler(...)
     |      Destruct.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class ConfigurationEventHandler(builtins.object)
     |  ConfigurationEventHandler(*args)
     |  
     |  The configuration event handler base class.  
     |  
     |  C++ includes: ConfigurationEventHandler.h
     |  
     |  Methods defined here:
     |  
     |  DestroyConfiguration(self) -> 'void'
     |      Destroys the configuration event handler.  
     |      
     |      C++ exceptions from this call will be caught and ignored.
     |  
     |  OnAttach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a Pylon Device (Pylon::IPylonDevice) is attached by
     |      calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnAttached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a Pylon Device (Pylon::IPylonDevice) has been
     |      attached by calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnCameraDeviceRemoved(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when a camera device removal from the PC has been
     |      detected.  
     |      
     |      The Pylon Device attached to the Instant Camera is not operable after this
     |      event. After it is made sure that no access to the Pylon Device or any of its
     |      node maps is made anymore the Pylon Device should be destroyed using
     |      InstantCamera::DeviceDestroy(). The access to the Pylon Device can be protected
     |      using the lock provided by GetLock(), e.g. when accessing parameters.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object from an additional
     |      thread.
     |  
     |  OnClose(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is closed.  
     |      
     |      Camera Close must not be called from here or from subsequent calls to avoid
     |      infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnClosed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been closed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnConfigurationDeregistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been
     |      deregistered.  
     |      
     |      The configuration event handler is automatically deregistered when the Instant
     |      Camera object is destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored.  This method is called
     |      inside the lock of the camera object.
     |  
     |  OnConfigurationRegistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been registered.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through.  This method is called inside
     |      the lock of the camera object.
     |  
     |  OnDestroy(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is destroyed.  
     |      
     |      Camera DestroyDevice must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDestroyed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is detached from the
     |      Instant Camera object.  
     |      
     |      The camera's Detach() method must not be called from here or from subsequent
     |      calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been detached from the
     |      Instant Camera object.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabError(self, camera: 'InstantCamera', errorMessage: 'char const *') -> 'void'
     |      This method is called when an exception has been triggered during grabbing.  
     |      
     |      An exception has been triggered by a grab thread. The grab will be stopped after
     |      this event call.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `errorMessage` :  
     |          The message of the exception that signaled an error during grabbing.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStart(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is started.  
     |      
     |      Camera StartGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStarted(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been started.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStop(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is stopped.  
     |      
     |      Camera StopGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStopped(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been stopped.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnOpen(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnOpened(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __del__ lambda self
     |  
     |  __disown__(self)
     |  
     |  __init__(self, *args)
     |      Copy.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_ConfigurationEventHandler(...)
     |      Destruct.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class DeviceInfo(CInfoBase)
     |  DeviceInfo(*args)
     |  
     |  Holds information about an enumerated device.  
     |  
     |  The device enumeration process creates a list of CDeviceInfo objects
     |  (Pylon::DeviceInfoList_t). Each CDeviceInfo objects stores information about a
     |  device. The information is retrieved during the device enumeration process
     |  (ITransportLayer::EnumerateDevices resp. CTlFactory::EnumerateDevices)  
     |  
     |  C++ includes: DeviceInfo.h
     |  
     |  Method resolution order:
     |      DeviceInfo
     |      CInfoBase
     |      IProperties
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  GetAddress(self) -> 'Pylon::String_t'
     |  
     |  GetBconAdapterLibraryApiVersion(self) -> 'Pylon::String_t'
     |  
     |  GetBconAdapterLibraryName(self) -> 'Pylon::String_t'
     |  
     |  GetBconAdapterLibraryVersion(self) -> 'Pylon::String_t'
     |  
     |  GetDefaultGateway(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceFactory(self) -> 'Pylon::String_t'
     |      Retrieves the identifier for the transport layer able to create this device.
     |      This property is identified by Key::DeviceFactoryKey.
     |  
     |  GetDeviceGUID(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceID(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceIdx(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceSpecificString(self) -> 'Pylon::String_t'
     |  
     |  GetDeviceVersion(self) -> 'Pylon::String_t'
     |      Retrieves the version string of the device. This property is identified by
     |      Key::DeviceVersionKey.
     |  
     |  GetDeviceXMLFileOverride(self) -> 'Pylon::String_t'
     |  
     |  GetDriverKeyName(self) -> 'Pylon::String_t'
     |  
     |  GetInitialBaudRate(self) -> 'Pylon::String_t'
     |  
     |  GetInterface(self) -> 'Pylon::String_t'
     |  
     |  GetInternalName(self) -> 'Pylon::String_t'
     |  
     |  GetIpAddress(self) -> 'Pylon::String_t'
     |  
     |  GetIpConfigCurrent(self) -> 'Pylon::String_t'
     |  
     |  GetIpConfigOptions(self) -> 'Pylon::String_t'
     |  
     |  GetMacAddress(self) -> 'Pylon::String_t'
     |  
     |  GetManufacturerInfo(self) -> 'Pylon::String_t'
     |  
     |  GetModelName(self) -> 'Pylon::String_t'
     |      Retrieves the model name of the device. This property is identified by
     |      Key::ModelNameKey.
     |  
     |  GetPortID(self) -> 'Pylon::String_t'
     |  
     |  GetPortNr(self) -> 'Pylon::String_t'
     |  
     |  GetPortSpecificString(self) -> 'Pylon::String_t'
     |  
     |  GetProductId(self) -> 'Pylon::String_t'
     |  
     |  GetSerialNumber(self) -> 'Pylon::String_t'
     |      Retrieves the serial number if it supported by the underlying implementation
     |      This property is identified by Key::SerialNumberKey.
     |  
     |  GetSubnetAddress(self) -> 'Pylon::String_t'
     |  
     |  GetSubnetMask(self) -> 'Pylon::String_t'
     |  
     |  GetSupportedBconAdapterApiVersion(self) -> 'Pylon::String_t'
     |  
     |  GetTransferMode(self) -> 'Pylon::String_t'
     |  
     |  GetUsbDriverType(self) -> 'Pylon::String_t'
     |  
     |  GetUserDefinedName(self) -> 'Pylon::String_t'
     |      Retrieves the user-defined name if present. This property is identified by
     |      Key::UserDefinedNameKey.
     |  
     |  GetVendorId(self) -> 'Pylon::String_t'
     |  
     |  GetXMLSource(self) -> 'Pylon::String_t'
     |      Retrieves the location where the XML file was loaded from. This property is
     |      identified by Key::XMLSourceKey. You must use the DeviceInfo of an opened
     |      IPylonDevice to retrieve this property.
     |  
     |  IsAddressAvailable(self) -> 'bool'
     |  
     |  IsAutoIpActive(self) -> 'bool'
     |  
     |  IsAutoIpSupported(self) -> 'bool'
     |  
     |  IsBconAdapterLibraryApiVersionAvailable(self) -> 'bool'
     |  
     |  IsBconAdapterLibraryNameAvailable(self) -> 'bool'
     |  
     |  IsBconAdapterLibraryVersionAvailable(self) -> 'bool'
     |  
     |  IsDefaultGatewayAvailable(self) -> 'bool'
     |  
     |  IsDeviceFactoryAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsDeviceGUIDAvailable(self) -> 'bool'
     |  
     |  IsDeviceIDAvailable(self) -> 'bool'
     |  
     |  IsDeviceIdxAvailable(self) -> 'bool'
     |  
     |  IsDeviceSpecificStringAvailable(self) -> 'bool'
     |  
     |  IsDeviceVersionAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsDeviceXMLFileOverrideAvailable(self) -> 'bool'
     |  
     |  IsDhcpActive(self) -> 'bool'
     |  
     |  IsDhcpSupported(self) -> 'bool'
     |  
     |  IsDriverKeyNameAvailable(self) -> 'bool'
     |  
     |  IsInitialBaudRateAvailable(self) -> 'bool'
     |  
     |  IsInterfaceAvailable(self) -> 'bool'
     |  
     |  IsInternalNameAvailable(self) -> 'bool'
     |  
     |  IsIpAddressAvailable(self) -> 'bool'
     |  
     |  IsIpConfigCurrentAvailable(self) -> 'bool'
     |  
     |  IsIpConfigOptionsAvailable(self) -> 'bool'
     |  
     |  IsMacAddressAvailable(self) -> 'bool'
     |  
     |  IsManufacturerInfoAvailable(self) -> 'bool'
     |  
     |  IsModelNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsPersistentIpActive(self) -> 'bool'
     |  
     |  IsPersistentIpSupported(self) -> 'bool'
     |  
     |  IsPortIDAvailable(self) -> 'bool'
     |  
     |  IsPortNrAvailable(self) -> 'bool'
     |  
     |  IsPortSpecificStringAvailable(self) -> 'bool'
     |  
     |  IsProductIdAvailable(self) -> 'bool'
     |  
     |  IsSerialNumberAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsSubnetAddressAvailable(self) -> 'bool'
     |  
     |  IsSubnetMaskAvailable(self) -> 'bool'
     |  
     |  IsSubset(self, Subset: 'IProperties') -> 'bool'
     |  
     |  IsSupportedBconAdapterApiVersionAvailable(self) -> 'bool'
     |  
     |  IsTransferModeAvailable(self) -> 'bool'
     |  
     |  IsUsbDriverTypeAvailable(self) -> 'bool'
     |  
     |  IsUserDefinedNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsVendorIdAvailable(self) -> 'bool'
     |  
     |  IsXMLSourceAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  SetAddress(self, AddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetBconAdapterLibraryApiVersion(self, BconAdapterLibraryApiVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetBconAdapterLibraryName(self, BconAdapterLibraryNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetBconAdapterLibraryVersion(self, BconAdapterLibraryVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDefaultGateway(self, DefaultGatewayValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDeviceClass(self, DeviceClassValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the device class device, e.g. Basler1394. This property is identified by
     |      Key::DeviceClassKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetDeviceFactory(self, DeviceFactoryValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetDeviceID(self, DeviceIDValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDeviceSpecificString(self, DeviceSpecificStringValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetDeviceVersion(self, DeviceVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetDeviceXMLFileOverride(self, DeviceXMLFileOverrideValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetFriendlyName(self, FriendlyNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the display friendly name of the device. This property is identified by
     |      Key::FriendlyNameKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetFullName(self, FullNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the full name identifying the device. This property is identified by
     |      Key::FullNameKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetInitialBaudRate(self, InitialBaudRateValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetInterface(self, InterfaceValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetInternalName(self, InternalNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetIpAddress(self, IpAddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetIpConfigCurrent(self, IpConfigCurrentValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetIpConfigOptions(self, IpConfigOptionsValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetMacAddress(self, MacAddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetModelName(self, ModelNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetPortID(self, PortIDValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetPortNr(self, PortNrValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetPortSpecificString(self, PortSpecificStringValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetPropertyValue(self, Name: 'Pylon::String_t const &', Value: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Modifies a property value This method overrides a method of a base class
     |      returning a reference to CDeviceInfo
     |  
     |  SetSerialNumber(self, SerialNumberValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetSubnetAddress(self, SubnetAddressValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetSubnetMask(self, SubnetMaskValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetSupportedBconAdapterApiVersion(self, SupportedBconAdapterApiVersionValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |  
     |  SetUserDefinedName(self, UserDefinedNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  SetVendorName(self, VendorNameValue: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the vendor name of the device. This property is identified by
     |      Key::VendorNameKey. This method overrides a method of a base class returning a
     |      reference to CDeviceInfo
     |  
     |  SetXMLSource(self, XMLSource: 'Pylon::String_t const &') -> 'Pylon::CDeviceInfo &'
     |      Sets the above property.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args)
     |  
     |  __lt__(self, rhs: 'DeviceInfo') -> 'bool'
     |      Return self<value.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_DeviceInfo(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CInfoBase:
     |  
     |  GetDeviceClass(self) -> 'Pylon::String_t'
     |      Retrieves the device class device, e.g. Basler1394. This property is identified
     |      by Key::DeviceClassKey.
     |  
     |  GetFriendlyName(self) -> 'Pylon::String_t'
     |      Retrieves the human readable name of the device. This property is identified by
     |      Key::FriendlyNameKey.
     |  
     |  GetFullName(self) -> 'Pylon::String_t'
     |      Retrieves the full name identifying the device. This property is identified by
     |      Key::FullNameKey.
     |  
     |  GetPropertyAvailable(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetPropertyNames(self) -> 'int'
     |  
     |  GetPropertyValue(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetVendorName(self) -> 'Pylon::String_t'
     |      Retrieves the vendor name of the device. This property is identified by
     |      Key::VendorNameKey.
     |  
     |  IsDeviceClassAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFriendlyNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFullNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsUserProvided(self) -> 'bool'
     |  
     |  IsVendorNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  __eq__(self, rhs: 'CInfoBase') -> 'bool'
     |      Return self==value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from CInfoBase:
     |  
     |  GetPropertyNotAvailable() -> 'char const *'
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from CInfoBase:
     |  
     |  PropertyNotAvailable = 'N/A'
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from IProperties:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DynamicCastException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      DynamicCastException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class FeaturePersistence(builtins.object)
     |  FeaturePersistence(*args, **kwargs)
     |  
     |  Utility class for saving and restoring camera features to and from a file or
     |  string.  
     |  
     |  note: When saving features, the behavior of cameras supporting sequencers
     |      depends on the current setting of the "SequenceEnable" (some GigE models)
     |      or "SequencerConfigurationMode" (USB only) features respectively.  
     |  
     |  Only if the sequencer is in configuration mode, are the sequence sets exported.
     |  Otherwise, the camera features are exported without sequence sets.  
     |  
     |  C++ includes: FeaturePersistence.h
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Load(FileName: 'Pylon::String_t const &', pNodeMap: 'INodeMap', validate: 'bool' = True) -> 'GENICAM_NAMESPACE::gcstring const &'
     |      Loads the features from the file to the node map.  
     |      
     |      Parameters
     |      ----------
     |      * `FileName` :  
     |          Name of the file that contains the node map values.  
     |      * `pNodeMap` :  
     |          Pointer to the node map  
     |      * `validate` :  
     |          If validate==true, all node values will be validated. In case of an error, a
     |          GenICam::RuntimeException will be thrown  
     |      
     |      Throws an exception if loading fails.
     |  
     |  LoadFromString(Features: 'Pylon::String_t const &', pNodeMap: 'INodeMap', validate: 'bool' = True) -> 'GENICAM_NAMESPACE::gcstring const &'
     |      Loads the features from the string to the node map.  
     |      
     |      Parameters
     |      ----------
     |      * `Features` :  
     |          String containing the node map values.  
     |      * `pNodeMap` :  
     |          Pointer to the node map.  
     |      * `validate` :  
     |          If validate==true, all node values will be validated. In case of an error, a
     |          GenICam::RuntimeException will be thrown.  
     |      
     |      Throws an exception if loading fails.
     |  
     |  Save(FileName: 'Pylon::String_t const &', pNodeMap: 'INodeMap') -> 'GENICAM_NAMESPACE::gcstring const &'
     |      Saves the node map to the file.  
     |      
     |      Sequence sets of a camera are automatically saved if SequenceEnable or
     |      SequencerConfigurationMode is enabled.  
     |      
     |      Parameters
     |      ----------
     |      * `FileName` :  
     |          Name of the file that contains the node map values  
     |      * `pNodeMap` :  
     |          Pointer to the node map  
     |      
     |      Throws an exception if saving fails.
     |  
     |  SaveToString(pNodeMap: 'INodeMap') -> 'GENICAM_NAMESPACE::gcstring &'
     |      Saves the node map to the string. Sequence sets of a camera are automatically
     |      saved, if SequenceEnable or SequencerConfigurationMode is enabled.  
     |      
     |      Parameters
     |      ----------
     |      * `Features` :  
     |          String containing the node map values  
     |      * `pNodeMap` :  
     |          Pointer to the node map  
     |      
     |      Throws an exception if saving fails.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class GenericException(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class GrabResult(builtins.object)
     |  GrabResult(*args)
     |  
     |  A smart pointer holding a reference to grab result data.  
     |  
     |  This class is used for distributing the grab result data of a camera. It
     |  controls the reuse and lifetime of the referenced buffer. When all smart
     |  pointers referencing a buffer go out of scope the referenced buffer is reused or
     |  destroyed. The data and the held buffer are still valid after the camera object
     |  it originated from has been destroyed.  
     |  
     |  attention: The grabbing will stop with an input queue underrun, when the grab
     |      results are never released, e.g. when put into a container.  
     |  
     |  The CGrabResultPtr class provides a cast operator that allows passing the grab
     |  result directly to functions or methods that take an const IImage& as parameter,
     |  e.g. image saving functions or image format converter methods.  
     |  
     |  attention: The returned reference to IImage is only valid as long the
     |      CGrabResultPtr object it came from is not destroyed.  
     |  
     |  Instances of CGrabResultPtr referencing the same grab result can be used from
     |  any thread context.  
     |  
     |  C++ includes: GrabResultPtr.h
     |  
     |  Methods defined here:
     |  
     |  CheckCRC(self) -> 'bool'
     |      Checks CRC sum of buffer, returns true if CRC sum is OK.
     |  
     |  GetArray = func_wrapper(*args, **kwargs)
     |  
     |  GetArrayZeroCopy = func_wrapper(*args, **kwargs)
     |  
     |  GetBlockID(self) -> 'uint64_t'
     |      Get the block ID of the grabbed frame (camera device specific).  
     |      
     |      par: IEEE 1394 Camera Devices
     |          The value of Block ID is always UINT64_MAX.  
     |      
     |      par: GigE Camera Devices
     |          The sequence number starts with 1 and wraps at 65535. The value 0 has a
     |          special meaning and indicates that this feature is not supported by the
     |          camera.  
     |      
     |      par: USB Camera Devices
     |          The sequence number starts with 0 and uses the full 64 Bit range.  
     |      
     |      attention: A block ID with the value UINT64_MAX indicates that the block ID is
     |          invalid and must not be used.
     |  
     |  GetBuffer(self) -> 'PyObject *'
     |      Get the pointer to the buffer.  
     |      
     |      If the chunk data feature is activated for the device, chunk data is appended to
     |      the image data. When writing past the image section while performing image
     |      processing, the chunk data will be corrupted.
     |  
     |  GetBufferContext(self) -> 'intptr_t'
     |      Get the context value assigned to the buffer. The context is set when
     |      CInstamtCamera is using a custom buffer factory.
     |  
     |  GetCameraContext(self) -> 'intptr_t'
     |      Get the context value assigned to the camera object. The context is attached to
     |      the result when it is retrieved.
     |  
     |  GetChunkDataNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Get the reference to the chunk data node map connected to the result.  
     |      
     |      An empty node map is returned when the device does not support this feature or
     |      when chunks are disabled.
     |  
     |  GetChunkNode(self, nodeName)
     |  
     |  GetErrorCode(self) -> 'uint32_t'
     |      This method returns the error code if GrabSucceeded() returns false due to an
     |      error.
     |  
     |  GetErrorDescription(self) -> 'Pylon::String_t'
     |      This method returns a description of the error if GrabSucceeded() returns false
     |      due to an error.
     |  
     |  GetGrabResultDataImpl(self) -> 'Pylon::CGrabResultData::CGrabResultDataImpl *'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |      Get the current number of rows expressed as number of pixels.
     |  
     |  GetID(self) -> 'int64_t'
     |      Get the ID of the grabbed image.  
     |      
     |      Always returns a number larger than 0. The counting starts with 1 and is never
     |      reset during the lifetime of the Instant Camera object.
     |  
     |  GetImageFormat = func_wrapper(*args, **kwargs)
     |  
     |  GetImageNumber(self) -> 'int64_t'
     |      Get the number of the image. This number is incremented when an image is
     |      retrieved using CInstantCamera::RetrieveResult().  
     |      
     |      Always returns a number larger than 0. The counting starts with 1 and is reset
     |      with every call to CInstantCamera::StartGrabbing().
     |  
     |  GetImageSize(self) -> 'size_t'
     |      Get the size of the image in byte.
     |  
     |  GetMemoryView(self) -> 'PyObject *'
     |  
     |  GetNumBufferExports(self, omv: 'PyObject *') -> 'int'
     |  
     |  GetNumberOfSkippedImages(self) -> 'int64_t'
     |      Get the number of skipped images before this image.  
     |      
     |      This value can be larger than 0 if EGrabStrategy_LatestImageOnly grab strategy
     |      or GrabStrategy_LatestImages grab strategy is used. Always returns a number
     |      larger than or equal 0. This number does not include the number of images lost
     |      in case of a buffer underrun in the driver.
     |  
     |  GetOffsetX(self) -> 'uint32_t'
     |      Get the current starting column.
     |  
     |  GetOffsetY(self) -> 'uint32_t'
     |      Get the current starting row.
     |  
     |  GetPaddingX(self) -> 'uint32_t'
     |      Get the number of extra data at the end of each row in bytes.
     |  
     |  GetPaddingY(self) -> 'uint32_t'
     |      Get the number of extra data at the end of the image data in bytes.
     |  
     |  GetPayloadSize(self) -> 'size_t'
     |      Get the current payload size in bytes.
     |  
     |  GetPayloadType(self) -> 'Pylon::EPayloadType'
     |      Get the current payload type.
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |      Get the current pixel type.
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |      Get the stride in byte.
     |  
     |  GetTimeStamp(self) -> 'uint64_t'
     |      Get the camera specific tick count (camera device specific).  
     |      
     |      This describes when the image exposure was started. Cameras that do not support
     |      this feature return zero. If supported, this can be used to determine which
     |      image AOIs were acquired simultaneously.
     |  
     |  GetWidth(self) -> 'uint32_t'
     |      Get the current number of columns.
     |  
     |  GrabSucceeded(self) -> 'bool'
     |      Returns true if an image has been grabbed successfully and false in the case of
     |      an error.
     |  
     |  HasCRC(self) -> 'bool'
     |      Checks if buffer has a CRC attached. This needs not be activated for the device.
     |      See the PayloadCRC16 chunk.
     |  
     |  IsChunkDataAvailable(self) -> 'bool'
     |      Returns true if chunk data is available.  
     |      
     |      This is the case if the chunk mode is enabled for the camera device. The
     |      parameter CInstantCamera::ChunkNodeMapsEnable of the used Instant Camera object
     |      is set to true (default setting). Chunk data node maps are supported by the
     |      Transport Layer of the camera device.
     |  
     |  IsUnique(self) -> 'bool'
     |      Indicates that the held grab result data and buffer is only referenced by this
     |      grab result.  
     |      
     |      Returns
     |      -------
     |      Returns true if the held grab result data and buffer is only referenced by this
     |      grab result. Returns false if the grab result is invalid.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  IsValid(self) -> 'bool'
     |      Check whether data is referenced.  
     |      
     |      Returns
     |      -------
     |      True if data is referenced.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  Release(self) -> 'void'
     |      The currently referenced data is released.  
     |      
     |      post: The currently referenced data is released.  
     |      
     |      Still valid after error.
     |  
     |  __bool__ = __nonzero__(self)
     |  
     |  __del__ lambda self
     |  
     |  __deref__(self) -> 'Pylon::CGrabResultData *'
     |  
     |  __dir__(self)
     |      Default dir() implementation.
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, type, value, traceback)
     |  
     |  __getattr__(self, attribute)
     |  
     |  __init__(self, *args)
     |      Creates a copy of a smart pointer.  
     |      
     |      Parameters
     |      ----------
     |      * `rhs` :  
     |          Another smart pointer, source of the result data to reference.  
     |      
     |      The data itself is not copied.  
     |      
     |      post:  
     |      
     |          *   Another reference to the grab result of the source is held if it
     |              references a grab result.  
     |          *   No grab result is referenced if the source does not reference a grab
     |              result.  
     |      
     |      Still valid after error.
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__(self, attribute, val)
     |      Implement setattr(self, name, value).
     |  
     |  contextmanager(func)
     |      @contextmanager decorator.
     |      
     |      Typical usage:
     |      
     |          @contextmanager
     |          def some_generator(<arguments>):
     |              <setup>
     |              try:
     |                  yield <value>
     |              finally:
     |                  <cleanup>
     |      
     |      This makes this:
     |      
     |          with some_generator(<arguments>) as <variable>:
     |              <body>
     |      
     |      equivalent to this:
     |      
     |          <setup>
     |          try:
     |              <variable> = <value>
     |              <body>
     |          finally:
     |              <cleanup>
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_GrabResult(...)
     |      Destroys the smart pointer.  
     |      
     |      post: The currently referenced data is released.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  Array
     |  
     |  BlockID
     |      Get the block ID of the grabbed frame (camera device specific).  
     |      
     |      par: IEEE 1394 Camera Devices
     |          The value of Block ID is always UINT64_MAX.  
     |      
     |      par: GigE Camera Devices
     |          The sequence number starts with 1 and wraps at 65535. The value 0 has a
     |          special meaning and indicates that this feature is not supported by the
     |          camera.  
     |      
     |      par: USB Camera Devices
     |          The sequence number starts with 0 and uses the full 64 Bit range.  
     |      
     |      attention: A block ID with the value UINT64_MAX indicates that the block ID is
     |          invalid and must not be used.
     |  
     |  Buffer
     |      Get the pointer to the buffer.  
     |      
     |      If the chunk data feature is activated for the device, chunk data is appended to
     |      the image data. When writing past the image section while performing image
     |      processing, the chunk data will be corrupted.
     |  
     |  ChunkDataNodeMap
     |      Get the reference to the chunk data node map connected to the result.  
     |      
     |      An empty node map is returned when the device does not support this feature or
     |      when chunks are disabled.
     |  
     |  ErrorCode
     |      This method returns the error code if GrabSucceeded() returns false due to an
     |      error.
     |  
     |  ErrorDescription
     |      This method returns a description of the error if GrabSucceeded() returns false
     |      due to an error.
     |  
     |  Height
     |      Get the current number of rows expressed as number of pixels.
     |  
     |  ID
     |      Get the ID of the grabbed image.  
     |      
     |      Always returns a number larger than 0. The counting starts with 1 and is never
     |      reset during the lifetime of the Instant Camera object.
     |  
     |  ImageNumber
     |      Get the number of the image. This number is incremented when an image is
     |      retrieved using CInstantCamera::RetrieveResult().  
     |      
     |      Always returns a number larger than 0. The counting starts with 1 and is reset
     |      with every call to CInstantCamera::StartGrabbing().
     |  
     |  ImageSize
     |      Get the size of the image in byte.
     |  
     |  NumberOfSkippedImages
     |      Get the number of skipped images before this image.  
     |      
     |      This value can be larger than 0 if EGrabStrategy_LatestImageOnly grab strategy
     |      or GrabStrategy_LatestImages grab strategy is used. Always returns a number
     |      larger than or equal 0. This number does not include the number of images lost
     |      in case of a buffer underrun in the driver.
     |  
     |  OffsetX
     |      Get the current starting column.
     |  
     |  OffsetY
     |      Get the current starting row.
     |  
     |  PaddingX
     |      Get the number of extra data at the end of each row in bytes.
     |  
     |  PaddingY
     |      Get the number of extra data at the end of the image data in bytes.
     |  
     |  PayloadSize
     |      Get the current payload size in bytes.
     |  
     |  PayloadType
     |      Get the current payload type.
     |  
     |  PixelType
     |      Get the current pixel type.
     |  
     |  TimeStamp
     |      Get the camera specific tick count (camera device specific).  
     |      
     |      This describes when the image exposure was started. Cameras that do not support
     |      this feature return zero. If supported, this can be used to determine which
     |      image AOIs were acquired simultaneously.
     |  
     |  Width
     |      Get the current number of columns.
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class GrabResultData(builtins.object)
     |  GrabResultData(*args, **kwargs)
     |  
     |  Makes the data for one grabbed buffer available.  
     |  
     |  C++ includes: GrabResultData.h
     |  
     |  Methods defined here:
     |  
     |  CheckCRC(self) -> 'bool'
     |      Checks CRC sum of buffer, returns true if CRC sum is OK.
     |  
     |  GetBlockID(self) -> 'uint64_t'
     |      Get the block ID of the grabbed frame (camera device specific).  
     |      
     |      par: IEEE 1394 Camera Devices
     |          The value of Block ID is always UINT64_MAX.  
     |      
     |      par: GigE Camera Devices
     |          The sequence number starts with 1 and wraps at 65535. The value 0 has a
     |          special meaning and indicates that this feature is not supported by the
     |          camera.  
     |      
     |      par: USB Camera Devices
     |          The sequence number starts with 0 and uses the full 64 Bit range.  
     |      
     |      attention: A block ID with the value UINT64_MAX indicates that the block ID is
     |          invalid and must not be used.
     |  
     |  GetBuffer(self) -> 'PyObject *'
     |      Get the pointer to the buffer.  
     |      
     |      If the chunk data feature is activated for the device, chunk data is appended to
     |      the image data. When writing past the image section while performing image
     |      processing, the chunk data will be corrupted.
     |  
     |  GetBufferContext(self) -> 'intptr_t'
     |      Get the context value assigned to the buffer. The context is set when
     |      CInstamtCamera is using a custom buffer factory.
     |  
     |  GetCameraContext(self) -> 'intptr_t'
     |      Get the context value assigned to the camera object. The context is attached to
     |      the result when it is retrieved.
     |  
     |  GetChunkDataNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Get the reference to the chunk data node map connected to the result.  
     |      
     |      An empty node map is returned when the device does not support this feature or
     |      when chunks are disabled.
     |  
     |  GetErrorCode(self) -> 'uint32_t'
     |      This method returns the error code if GrabSucceeded() returns false due to an
     |      error.
     |  
     |  GetErrorDescription(self) -> 'Pylon::String_t'
     |      This method returns a description of the error if GrabSucceeded() returns false
     |      due to an error.
     |  
     |  GetGrabResultDataImpl(self) -> 'Pylon::CGrabResultData::CGrabResultDataImpl *'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |      Get the current number of rows expressed as number of pixels.
     |  
     |  GetID(self) -> 'int64_t'
     |      Get the ID of the grabbed image.  
     |      
     |      Always returns a number larger than 0. The counting starts with 1 and is never
     |      reset during the lifetime of the Instant Camera object.
     |  
     |  GetImageNumber(self) -> 'int64_t'
     |      Get the number of the image. This number is incremented when an image is
     |      retrieved using CInstantCamera::RetrieveResult().  
     |      
     |      Always returns a number larger than 0. The counting starts with 1 and is reset
     |      with every call to CInstantCamera::StartGrabbing().
     |  
     |  GetImageSize(self) -> 'size_t'
     |      Get the size of the image in byte.
     |  
     |  GetMemoryView(self) -> 'PyObject *'
     |  
     |  GetNumBufferExports(self, omv: 'PyObject *') -> 'int'
     |  
     |  GetNumberOfSkippedImages(self) -> 'int64_t'
     |      Get the number of skipped images before this image.  
     |      
     |      This value can be larger than 0 if EGrabStrategy_LatestImageOnly grab strategy
     |      or GrabStrategy_LatestImages grab strategy is used. Always returns a number
     |      larger than or equal 0. This number does not include the number of images lost
     |      in case of a buffer underrun in the driver.
     |  
     |  GetOffsetX(self) -> 'uint32_t'
     |      Get the current starting column.
     |  
     |  GetOffsetY(self) -> 'uint32_t'
     |      Get the current starting row.
     |  
     |  GetPaddingX(self) -> 'uint32_t'
     |      Get the number of extra data at the end of each row in bytes.
     |  
     |  GetPaddingY(self) -> 'uint32_t'
     |      Get the number of extra data at the end of the image data in bytes.
     |  
     |  GetPayloadSize(self) -> 'size_t'
     |      Get the current payload size in bytes.
     |  
     |  GetPayloadType(self) -> 'Pylon::EPayloadType'
     |      Get the current payload type.
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |      Get the current pixel type.
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |      Get the stride in byte.
     |  
     |  GetTimeStamp(self) -> 'uint64_t'
     |      Get the camera specific tick count (camera device specific).  
     |      
     |      This describes when the image exposure was started. Cameras that do not support
     |      this feature return zero. If supported, this can be used to determine which
     |      image AOIs were acquired simultaneously.
     |  
     |  GetWidth(self) -> 'uint32_t'
     |      Get the current number of columns.
     |  
     |  GrabSucceeded(self) -> 'bool'
     |      Returns true if an image has been grabbed successfully and false in the case of
     |      an error.
     |  
     |  HasCRC(self) -> 'bool'
     |      Checks if buffer has a CRC attached. This needs not be activated for the device.
     |      See the PayloadCRC16 chunk.
     |  
     |  IsChunkDataAvailable(self) -> 'bool'
     |      Returns true if chunk data is available.  
     |      
     |      This is the case if the chunk mode is enabled for the camera device. The
     |      parameter CInstantCamera::ChunkNodeMapsEnable of the used Instant Camera object
     |      is set to true (default setting). Chunk data node maps are supported by the
     |      Transport Layer of the camera device.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_GrabResultData(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    IImage = class Image(builtins.object)
     |  IImage(*args, **kwargs)
     |  
     |  Methods defined here:
     |  
     |  GetBuffer(self) -> 'void *'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |  
     |  GetImageSize(self) -> 'size_t'
     |  
     |  GetOrientation(self) -> 'Pylon::EImageOrientation'
     |  
     |  GetPaddingX(self) -> 'size_t'
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |  
     |  GetWidth(self) -> 'uint32_t'
     |  
     |  IsUnique(self) -> 'bool'
     |  
     |  IsValid(self) -> 'bool'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_Image(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class IProperties(builtins.object)
     |  IProperties(*args, **kwargs)
     |  
     |  Methods defined here:
     |  
     |  GetPropertyAvailable(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetPropertyNames(self) -> 'int'
     |  
     |  GetPropertyValue(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  IsSubset(self, Subset: 'IProperties') -> 'bool'
     |  
     |  SetPropertyValue(self, Name: 'Pylon::String_t const &', Value: 'Pylon::String_t const &') -> 'Pylon::IProperties &'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_IProperties(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class IReusableImage(Image)
     |  IReusableImage(*args, **kwargs)
     |  
     |  Method resolution order:
     |      IReusableImage
     |      Image
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  IsAdditionalPaddingSupported(self) -> 'bool'
     |  
     |  IsSupportedPixelType(self, pixelType: 'Pylon::EPixelType') -> 'bool'
     |  
     |  Release(self) -> 'void'
     |  
     |  Reset(self, *args) -> 'void'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_IReusableImage(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |  
     |  GetBuffer(self) -> 'void *'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |  
     |  GetImageSize(self) -> 'size_t'
     |  
     |  GetOrientation(self) -> 'Pylon::EImageOrientation'
     |  
     |  GetPaddingX(self) -> 'size_t'
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |  
     |  GetWidth(self) -> 'uint32_t'
     |  
     |  IsUnique(self) -> 'bool'
     |  
     |  IsValid(self) -> 'bool'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    ITransportLayer = class TransportLayer(builtins.object)
     |  ITransportLayer(*args, **kwargs)
     |  
     |  Methods defined here:
     |  
     |  CreateDeviceInfo(self) -> 'Pylon::CDeviceInfo'
     |  
     |  EnumerateInterfaces(self, list: 'Pylon::InterfaceInfoList_t &', addToList: 'bool' = False) -> 'int'
     |  
     |  GetNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap *'
     |  
     |  GetTlInfo(self) -> 'Pylon::CTlInfo'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_TransportLayer(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  NodeMap
     |  
     |  TlInfo
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class Image(builtins.object)
     |  Image(*args, **kwargs)
     |  
     |  Methods defined here:
     |  
     |  GetBuffer(self) -> 'void *'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |  
     |  GetImageSize(self) -> 'size_t'
     |  
     |  GetOrientation(self) -> 'Pylon::EImageOrientation'
     |  
     |  GetPaddingX(self) -> 'size_t'
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |  
     |  GetWidth(self) -> 'uint32_t'
     |  
     |  IsUnique(self) -> 'bool'
     |  
     |  IsValid(self) -> 'bool'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_Image(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class ImageEventHandler(builtins.object)
     |  ImageEventHandler(*args)
     |  
     |  The image event handler base class.  
     |  
     |  C++ includes: ImageEventHandler.h
     |  
     |  Methods defined here:
     |  
     |  DestroyImageEventHandler(self) -> 'void'
     |      Destroys the image event handler.  
     |      
     |      C++ exceptions from this call will be caught and ignored.
     |  
     |  OnImageEventHandlerDeregistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the image event handler has been deregistered.  
     |      
     |      The image event handler is automatically deregistered when the Instant Camera
     |      object is destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored.  This method is called
     |      inside the lock of the image event handler registry.
     |  
     |  OnImageEventHandlerRegistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the image event handler has been registered.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through.  This method is called inside
     |      the lock of the image event handler registry.
     |  
     |  OnImageGrabbed(self, camera: 'InstantCamera', grabResult: 'GrabResult') -> 'void'
     |      This method is called when an image has been grabbed.  
     |      
     |      The grab result smart pointer passed does always reference a grab result data
     |      object. The status of the grab needs to be checked before accessing the grab
     |      result data. See CGrabResultData::GrabSucceeded(),
     |      CGrabResultData::GetErrorCode() and CGrabResultData::GetErrorDescription() for
     |      more information.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `grabResult` :  
     |          The grab result data.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called outside the lock of the camera object but inside the lock
     |      of the image event handler registry.
     |  
     |  OnImagesSkipped(self, camera: 'InstantCamera', countOfSkippedImages: 'size_t') -> 'void'
     |      This method is called when images have been skipped using the
     |      GrabStrategy_LatestImageOnly strategy or the GrabStrategy_LatestImages strategy.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `countOfSkippedImages` :  
     |          The number of images skipped. This `countOfSkippedImages` does not include
     |          the number of images lost in the case of a buffer under run in the driver.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called outside the lock of the camera object but inside the lock
     |      of the image event handler registry.
     |  
     |  __del__ lambda self
     |  
     |  __disown__(self)
     |  
     |  __init__(self, *args)
     |      Copy.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_ImageEventHandler(...)
     |      Destruct.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class ImageFormatConverter(ImageFormatConverterParams_Params)
     |  Creates new images by converting a source image to another format.  
     |  
     |  Supported input image formats defined by the pixel type:  
     |  
     |  *   PixelType_Mono1packed  
     |  *   PixelType_Mono2packed  
     |  *   PixelType_Mono4packed  
     |  *   PixelType_Mono8  
     |  *   PixelType_Mono10  
     |  *   PixelType_Mono10packed  
     |  *   PixelType_Mono10p  
     |  *   PixelType_Mono12  
     |  *   PixelType_Mono12packed  
     |  *   PixelType_Mono12p  
     |  *   PixelType_Mono16  
     |  
     |  *   PixelType_BayerGR8  
     |  *   PixelType_BayerRG8  
     |  *   PixelType_BayerGB8  
     |  *   PixelType_BayerBG8  
     |  *   PixelType_BayerGR10  
     |  *   PixelType_BayerRG10  
     |  *   PixelType_BayerGB10  
     |  *   PixelType_BayerBG10  
     |  *   PixelType_BayerGR12  
     |  *   PixelType_BayerRG12  
     |  *   PixelType_BayerGB12  
     |  *   PixelType_BayerBG12  
     |  *   PixelType_BayerGR12Packed  
     |  *   PixelType_BayerRG12Packed  
     |  *   PixelType_BayerGB12Packed  
     |  *   PixelType_BayerBG12Packed  
     |  *   PixelType_BayerGR10p  
     |  *   PixelType_BayerRG10p  
     |  *   PixelType_BayerGB10p  
     |  *   PixelType_BayerBG10p  
     |  *   PixelType_BayerGR12p  
     |  *   PixelType_BayerRG12p  
     |  *   PixelType_BayerGB12p  
     |  *   PixelType_BayerBG12p  
     |  *   PixelType_BayerGR16  
     |  *   PixelType_BayerRG16  
     |  *   PixelType_BayerGB16  
     |  *   PixelType_BayerBG16  
     |  
     |  *   PixelType_RGB8packed  
     |  *   PixelType_BGR8packed  
     |  *   PixelType_RGBA8packed  
     |  *   PixelType_BGRA8packed  
     |  *   PixelType_RGB10packed  
     |  *   PixelType_BGR10packed  
     |  *   PixelType_RGB12packed  
     |  *   PixelType_BGR12packed  
     |  *   PixelType_RGB12V1packed  
     |  *   PixelType_RGB16packed  
     |  *   PixelType_RGB8planar  
     |  *   PixelType_RGB16planar  
     |  
     |  *   PixelType_YUV422packed  
     |  *   PixelType_YUV422_YUYV_Packed  
     |  
     |  Supported output image formats defined by the pixel type:  
     |  
     |  *   PixelType_BGRA8packed - This pixel type can be used in Windows bitmaps. See
     |      Pylon::SBGRA8Pixel.  
     |  *   PixelType_BGR8packed - This pixel type can be used in Windows bitmaps. See
     |      Pylon::SBGR8Pixel.  
     |  *   PixelType_RGB8packed - See Pylon::SRGB8Pixel.  
     |  *   PixelType_RGB16packed - See Pylon::SRGB16Pixel.  
     |  *   PixelType_RGB8planar  
     |  *   PixelType_RGB16planar  
     |  *   PixelType_Mono8  
     |  *   PixelType_Mono16  
     |  
     |  All input image formats can be converted to all output image formats.  
     |  
     |  RGB, BGR and Bayer image formats are converted to monochrome formats by using
     |  the following formula:  
     |  
     |  
     |  YUV formats are converted to 16 bit bit depth in an intermediate conversion
     |  step. This is why the output is always aligned at the most significant bit when
     |  converting to 16 bit color output formats like PixelType_RGB16packed.  
     |  
     |  par: Limitations:
     |      The last column of a YUV input image with odd width cannot be converted. The
     |      last column and the last row of a Bayer input image cannot be converted.  
     |  
     |  The default treatment of rows and columns that cannot be converted due to their
     |  location on edges, can be controlled using the
     |  CImageFormatConverter::InconvertibleEdgeHandling parameter. See also the
     |  Convert() method description.  
     |  
     |  The CImageFormatConverter class is not thread-safe.  
     |  
     |  C++ includes: ImageFormatConverter.h
     |  
     |  Method resolution order:
     |      ImageFormatConverter
     |      ImageFormatConverterParams_Params
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Convert(self, *args) -> 'void'
     |      Creates a new image by converting an image to a different format.  
     |      
     |      The image is converted to the destination image according to the current
     |      converter settings. The padding area of a row in the destination image is set to
     |      zero.  
     |      
     |      Parameters
     |      ----------
     |      * `pDestinationBuffer` :  
     |          The pointer to the buffer of the destination image.  
     |      * `destinationBufferSizeBytes` :  
     |          The size of the buffer of the destination image.  
     |      * `pSourceBuffer` :  
     |          The pointer to the buffer of the source image.  
     |      * `sourceBufferSizeBytes` :  
     |          The size of the buffer of the source image.  
     |      * `sourcePixelType` :  
     |          The pixel type of the source image.  
     |      * `sourceWidth` :  
     |          The number of pixels in a row in the source image.  
     |      * `sourceHeight` :  
     |          The number of rows in the source image.  
     |      * `sourcePaddingX` :  
     |          The number of extra data bytes at the end of each row. The default value is
     |          usually 0.  
     |      * `sourceOrientation` :  
     |          The vertical orientation of the source image in the image buffer. The
     |          default value is usually ImageOrientation_TopDown.  
     |      
     |      pre:  
     |      
     |          *   The parameters regarding the source buffer must describe a valid image.  
     |          *   The format of the input image represented by the given parameter must be
     |              supported by the converter.  
     |          *   If the destination image buffer must be large enough to hold the
     |              destination image.  
     |          *   The the source buffer can not be equal the destination buffer.  
     |      
     |      Throws an exception if the passed parameters are not valid. The converter object
     |      is still valid after error.
     |  
     |  GetBufferSizeForConversion(self, *args) -> 'size_t'
     |      Computes the size of the destination image buffer in byte.  
     |      
     |      Parameters
     |      ----------
     |      * `sourceWidth` :  
     |          The number of pixels in a row in the source image.  
     |      * `sourceHeight` :  
     |          The number of rows in the source image.  
     |      * `sourcePixelType` :  
     |          The pixel type of the source image.  
     |      
     |      Returns
     |      -------
     |      The size of the destination image when converting the source image using current
     |      converter settings.  
     |      
     |      pre:  
     |      
     |          *   The `sourceWidth` value must be >= 0 and < _I32_MAX.  
     |          *   The `sourceHeight` value must be >= 0 and < _I32_MAX.  
     |      
     |      Throws an exception if the destination image size for the passed input cannot be
     |      computed. The converter object is still valid after error.
     |  
     |  GetNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Provides access to the node map of the format converter.  
     |      
     |      Returns
     |      -------
     |      Reference to the node map of the format converter.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  GetOutputPixelFormat(self) -> 'Pylon::EPixelType'
     |  
     |  ImageHasDestinationFormat(self, *args) -> 'bool'
     |      Checks to see if a conversion is required or if the source image already has the
     |      desired format.  
     |      
     |      Parameters
     |      ----------
     |      * `sourcePixelType` :  
     |          The pixel type of the source image.  
     |      * `sourcePaddingX` :  
     |          The number of extra data bytes at the end of each row. The default value is
     |          usually 0.  
     |      * `sourceOrientation` :  
     |          The vertical orientation of the image in the image buffer. The default value
     |          is usually ImageOrientation_TopDown.  
     |      
     |      Returns
     |      -------
     |      Returns true if the source image already has the desired format. This is done
     |      according to the current converter settings.  
     |      
     |      A conversion may even be required image format does not change e.g. if the gamma
     |      conversion method is selected and the format describes a monochrome image.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  Initialize(self, sourcePixelType: 'Pylon::EPixelType') -> 'void'
     |      Optionally initializes the image format converter before conversion.  
     |      
     |      Parameters
     |      ----------
     |      * `sourcePixelType` :  
     |          The pixel type of the source image.  
     |      
     |      *   Depending on parameter settings and the input format, data structures
     |          required for conversion are created, e.g. lookup tables.  
     |      *   Initialization is done automatically when calling Convert() if needed. This
     |          may add a delay when converting the first image.  
     |      
     |      pre:  
     |      
     |          *   The converter parameters are set up.  
     |          *   The `pixelTypeSource` must be supported by the converter.  
     |      
     |      Lookup tables are created when using monochrome images as input and when the
     |      gamma conversion method is selected or when the shift conversion method is
     |      selected and the value of AdditionalLeftShift is not zero. The converter can be
     |      reinitialized with other settings if required.  
     |      
     |      Throws an exception if the passed pixel type does not represent a valid input
     |      format. The converter object is still valid after error and can be initialized
     |      again.
     |  
     |  IsInitialized(self, sourcePixelType: 'Pylon::EPixelType') -> 'bool'
     |      Returns information about the converter being initialized.  
     |      
     |      Parameters
     |      ----------
     |      * `sourcePixelType` :  
     |          The pixel type of the source image.  
     |      
     |      The result depends on the converter settings.  
     |      
     |      Returns
     |      -------
     |      True if initialized.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  SetOutputPixelFormat(self, pxl_fmt: 'Pylon::EPixelType') -> 'void'
     |  
     |  Uninitialize(self) -> 'void'
     |      Destroys data structures required for conversion.  
     |      
     |      This function can be called to free resources held by the format converter.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |      Creates an image format converter.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  IsSupportedInputFormat(sourcePixelType: 'Pylon::EPixelType') -> 'bool'
     |      Returns true if the image format defined by the given pixel type is a supported
     |      input format.  
     |      
     |      Parameters
     |      ----------
     |      * `sourcePixelType` :  
     |          The pixel type of the source image.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  IsSupportedOutputFormat(destinationPixelType: 'Pylon::EPixelType') -> 'bool'
     |      Returns true if the image format defined by the given pixel type is a supported
     |      output format.  
     |      
     |      Parameters
     |      ----------
     |      * `destinationPixelType` :  
     |          The pixel type of the destination image.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  __swig_destroy__ = delete_ImageFormatConverter(...)
     |      Destroys the image format converter.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  OutputPixelFormat
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ImageFormatConverterParams_Params:
     |  
     |  AdditionalLeftShift
     |  
     |  Gamma
     |  
     |  InconvertibleEdgeHandling
     |  
     |  MonoConversionMethod
     |  
     |  OutputBitAlignment
     |  
     |  OutputOrientation
     |  
     |  OutputPaddingX
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ImageFormatConverterParams_Params(builtins.object)
     |  ImageFormatConverterParams_Params(*args, **kwargs)
     |  
     |  Interface to image format converter parameters.  
     |  
     |  C++ includes: _ImageFormatConverterParams.h
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  AdditionalLeftShift
     |  
     |  Gamma
     |  
     |  InconvertibleEdgeHandling
     |  
     |  MonoConversionMethod
     |  
     |  OutputBitAlignment
     |  
     |  OutputOrientation
     |  
     |  OutputPaddingX
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class ImagePersistenceOptions(builtins.object)
     |  Used to pass options to CImagePersistence methods.  
     |  
     |  C++ includes: ImagePersistence.h
     |  
     |  Methods defined here:
     |  
     |  GetQuality(self) -> 'int'
     |      Returns the set quality level.
     |  
     |  SetQuality(self, quality: 'int') -> 'void'
     |      Set the image quality options. Valid quality values range from 0 to 100.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_ImagePersistenceOptions(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class InstantCamera(InstantCameraParams_Params)
     |  InstantCamera(*args)
     |  
     |  Provides convenient access to a camera device.  
     |  
     |  *   Establishes a single access point for accessing camera functionality.  
     |  *   The class can be used off the shelf without any parameters. The camera uses
     |      a default configuration for the camera device. This can be overridden.  
     |  *   Handles Pylon device lifetime. This can be overridden.  
     |  *   Handles opening and closing of a Pylon device automatically.  
     |  *   Handles chunk data parsing automatically returning the chunk data in the
     |      grab result.  
     |  *   Handles event grabbing automatically providing a convenient interface for
     |      event callbacks. This can be overridden.  
     |  *   Handles physical camera device removal.  
     |  *   Handles the creation, reuse, and destruction of buffers.  
     |  *   The grabbing can be done in the context of the caller or by using an
     |      additional grab loop thread.  
     |  *   The Instant Camera class is extensible using derivation or by registering
     |      event handler objects.  
     |  
     |  C++ includes: InstantCamera.h
     |  
     |  Method resolution order:
     |      InstantCamera
     |      InstantCameraParams_Params
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Attach(self, *args) -> 'void'
     |      Attaches a Pylon device to the Instant Camera.  
     |      
     |      Parameters
     |      ----------
     |      * `pDevice` :  
     |          The Pylon device to attach.  
     |      * `cleanupProcedure` :  
     |          If cleanupProcedure equals Cleanup_Delete, the Pylon device is destroyed
     |          when the Instant Camera object is destroyed.  
     |      
     |      *   If a Pylon device is currently attached, it is destroyed (DestroyDevice())
     |          or removed (DetachDevice()) depending on the previously set cleanup
     |          procedure value.  
     |      *   If the pDevice parameter is NULL, nothing more is done.  
     |      *   The OnAttach configuration event is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      *   The new Pylon device is attached.  
     |      *   If the passed Pylon device is open, callbacks for camera events are
     |          registered at the camera node map. (This may fail)  
     |      *   If the passed Pylon device is open, a device removal call back is
     |          registered. (This may fail)  
     |      *   If the passed Pylon device is open, access modifiers (see
     |          IPylonDevice::Open()) are overtaken as camera parameters.  
     |      *   The OnAttached configuration event is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      
     |      post:  
     |      
     |          *   If the passed pointer to the Pylon device is NULL, the Instant Camera
     |              object is in the "no device attached" state.  
     |          *   If the passed pointer to the Pylon device is not NULL, the passed Pylon
     |              device is attached.  
     |          *   If the set cleanup procedure equals Cleanup_Delete, the Pylon device is
     |              destroyed when the Instant Camera object is destroyed or a new device is
     |              attached.  
     |          *   If the passed Pylon device is open and the registration of callbacks
     |              fails, the Instant Camera object is in the "no device attached" state.  
     |          *   The opened-by-user flag is set, preventing closing of the Pylon device
     |              on StopGrabbing() when the attached Pylon device is already open.  
     |      
     |      May throw an exception if the passed Pylon device is open. Does not throw C++
     |      exceptions if the passed Pylon device is closed or NULL.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  Close(self) -> 'void'
     |      Closes the attached Pylon device.  
     |      
     |      *   If no Pylon device is attached, nothing is done.  
     |      *   If the Pylon device is already closed, nothing is done.  
     |      *   If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      *   The configuration event OnClose is fired. Possible C++ exceptions from event
     |          calls are caught and ignored. All event handlers are notified.  
     |      *   The Pylon device is closed.  
     |      *   The configuration event OnClosed is fired if the Pylon device has been
     |          closed successfully. Possible C++ exceptions from event calls are caught and
     |          ignored. All event handlers are notified.  
     |      
     |      post: The Pylon device is closed.  
     |      
     |      Does not throw C++ exceptions. Possible C++ exceptions are caught and ignored.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  DeregisterCameraEventHandler(self, cameraEventHandler: 'CameraEventHandler', nodeName: 'Pylon::String_t const &') -> 'bool'
     |      Removes a camera event handler from the list of registered camera event handler
     |      objects.  
     |      
     |      If the camera event handler is not found, nothing is done.  
     |      
     |      Parameters
     |      ----------
     |      * `cameraEventHandler` :  
     |          The registered receiver of camera events.  
     |      * `nodeName` :  
     |          The name of the event data node updated on camera event, e.g.
     |          "ExposureEndEventTimestamp" for exposure end event.  
     |      
     |      Returns
     |      -------
     |      True if successful  
     |      
     |      post:  
     |      
     |          *   The cameraEventHandler is deregistered.  
     |          *   If the camera event handler has been registered by passing a pointer and
     |              the cleanup procedure is Cleanup_Delete, the event handler is deleted.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the camera event handler lock. If the camera
     |      is open, the camera node map lock is also used for synchronization.
     |  
     |  DeregisterConfiguration(self, configurator: 'ConfigurationEventHandler') -> 'bool'
     |      Removes a configurator from the list of registered configurator objects.  
     |      
     |      If the configurator is not found, nothing is done.  
     |      
     |      Parameters
     |      ----------
     |      * `configurator` :  
     |          The registered receiver of configuration events.  
     |      
     |      Returns
     |      -------
     |      True if successful  
     |      
     |      post:  
     |      
     |          *   The configurator is deregistered.  
     |          *   If the configuration has been registered by passing a pointer and the
     |              cleanup procedure is Cleanup_Delete, the event handler is deleted.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  DeregisterImageEventHandler(self, imageEventHandler: 'ImageEventHandler') -> 'bool'
     |      Removes an image event handler from the list of registered image event handler
     |      objects.  
     |      
     |      If the image event handler is not found, nothing is done.  
     |      
     |      Parameters
     |      ----------
     |      * `imageEventHandler` :  
     |          The registered receiver of configuration events.  
     |      
     |      Returns
     |      -------
     |      True if successful  
     |      
     |      post:  
     |      
     |          *   The imageEventHandler is deregistered.  
     |          *   If the image event handler has been registered by passing a pointer and
     |              the cleanup procedure is Cleanup_Delete, the event handler is deleted.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the internal image event handler registry
     |      lock.
     |  
     |  DestroyDevice(self) -> 'void'
     |      Destroys the attached Pylon device.  
     |      
     |      attention: The node maps, e.g. the camera node map, of the attached Pylon device
     |          must not be accessed anymore while destroying the Pylon device.  
     |      
     |      *   If no Pylon device is attached, nothing is done.  
     |      *   If the Pylon device is open, it is closed by calling Close().  
     |      *   The configuration event OnDestroy is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      *   The Pylon device is destroyed even if the cleanup procedure Cleanup_None has
     |          been passed when calling Attach() before.  
     |      *   The configuration event OnDestroyed is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      
     |      post: No Pylon device is attached.  
     |      
     |      Does not throw C++ exceptions. Possible C++ exceptions are caught and ignored.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  DetachDevice(self) -> 'Pylon::IPylonDevice *'
     |      Detaches an attached Pylon device.  
     |      
     |      *   If no Pylon device is attached, nothing is done.  
     |      *   If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      *   The configuration event OnDetach is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      *   The Pylon device is detached.  
     |      *   The configuration event OnDetached is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      
     |      Returns
     |      -------
     |      The attached Pylon device or NULL if nothing has been attached before.  
     |      
     |      post:  
     |      
     |          *   No Pylon device is attached.  
     |          *   The ownership of the Pylon device goes to the caller who is responsible
     |              for destroying the Pylon device.  
     |      
     |      Does not throw C++ exceptions. Possible C++ exceptions are caught and ignored.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  ExecuteSoftwareTrigger(self) -> 'void'
     |      Executes the software trigger command.  
     |      
     |      The camera needs to be configured for software trigger mode. Additionally, the
     |      camera needs to be ready to accept triggers. When triggering a frame this can be
     |      checked using the WaitForFrameTriggerReady() method;  
     |      
     |      note: The application has to make sure that the correct trigger is selected
     |          before calling ExecuteSoftwareTrigger(). This can be done via the camera's
     |          TriggerSelector node. The `Pylon::CSoftwareTriggerConfiguration` selects the
     |          correct trigger when the Instant Camera is opened.  
     |      
     |      pre:  
     |      
     |          *   The grabbing is started.  
     |          *   The camera device supports software trigger.  
     |          *   The software trigger is available. This depends on the configuration of
     |              the camera device.  
     |      
     |      Accessing the camera registers may fail. Throws an exception on timeout if
     |      `timeoutHandling` is TimeoutHandling_ThrowException.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetCameraContext(self) -> 'intptr_t'
     |      Returns the context that is attached to each grab result of the camera object.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetCameraEventWaitObject(self) -> 'Pylon::WaitObject const &'
     |      Provides access to a wait object indicating available camera events.  
     |      
     |      This wait object is Pylon device specific and changes when a new Pylon device is
     |      attached to the camera.  
     |      
     |      Returns
     |      -------
     |      A wait object indicating available camera events.  
     |      
     |      pre:  
     |      
     |          *   A Pylon device is attached.  
     |          *   The Pylon device is open.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetDeviceInfo(self) -> 'Pylon::CDeviceInfo const &'
     |      Provides access to the device info object of the attached Pylon device or an
     |      empty one.  
     |      
     |      Returns
     |      -------
     |      The info object of the attached Pylon device or an empty one.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetEventGrabberNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Provides access to the event grabber node map of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      Reference to the event grabber node map of the attached Pylon device or a
     |      reference to the empty node map if event grabbing is not supported. The
     |      GENAPI_NAMESPACE::INodeMap::GetNumNodes() method can be used to check whether
     |      the node map is empty.  
     |      
     |      pre:  
     |      
     |          *   A Pylon device is attached.  
     |          *   The Pylon device is open.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetGrabResultWaitObject(self) -> 'Pylon::WaitObject const &'
     |      Provides access to a wait object indicating available grab results.  
     |      
     |      Returns
     |      -------
     |      A wait object indicating available grab results.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetGrabStopWaitObject(self) -> 'Pylon::WaitObject const &'
     |      Provides access to a wait object indicating that the grabbing has stopped.  
     |      
     |      Returns
     |      -------
     |      A wait object indicating that the grabbing has stopped.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetInstantCameraNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Provides access to the node map of the Instant Camera object.  
     |      
     |      The node map of the camera device is made available by the GetNodeMap() method.  
     |      
     |      Returns
     |      -------
     |      Reference to the node map of the Instant Camera object.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Provides access to the node map of the camera device.  
     |      
     |      The Pylon device must be opened before reading ore writing any parameters of the
     |      camera device. This can be done using the Open() method of the Instant Camera
     |      class.  
     |      
     |      Returns
     |      -------
     |      Reference to the node map of the camera device.  
     |      
     |      pre: A Pylon device is attached.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetQueuedBufferCount(self) -> 'size_t'
     |      Deprecated: This method has been deprecated. Use the NumQueuedBuffers parameter
     |      instead.  
     |      
     |      Returns
     |      -------
     |      The number of buffers that are queued for grabbing.
     |  
     |  GetSfncVersion(self) -> 'VersionInfo'
     |      Returns the SFNC version read from the camera node map.  
     |      
     |      The SFNC version is read from the camera node map using the integer nodes
     |      DeviceSFNCVersionMajor, DeviceSFNCVersionMinor, and DeviceSFNCVersionSubMinor.  
     |      
     |      Returns
     |      -------
     |      The SFNC version used by the camera device. The returned SFNC version is 0.0.0
     |      (Pylon::Sfnc_VersionUndefined) if no SFNC version information is provided by the
     |      camera device.  
     |      
     |      pre: A Pylon device is attached.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetStreamGrabberNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Provides access to the stream grabber node map of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      Reference to the stream grabber node map of the attached Pylon device or the
     |      reference to the empty node map if grabbing is not supported. The
     |      GENAPI_NAMESPACE::INodeMap::GetNumNodes() method can be used to check whether
     |      the node map is empty.  
     |      
     |      pre:  
     |      
     |          *   A Pylon device is attached.  
     |          *   The Pylon device is open.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GetTLNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap &'
     |      Provides access to the transport layer node map of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      Reference to the transport layer node map of the attached Pylon device or the
     |      reference to the empty node map if a transport layer node map is not supported.
     |      The GENAPI_NAMESPACE::INodeMap::GetNumNodes() method can be used to check
     |      whether the node map is empty.  
     |      
     |      pre: A Pylon device is attached.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  GrabOne(self, *args) -> 'bool'
     |      Grabs one image.  
     |      
     |      The following code shows a simplified version of what is done (happy path):  
     |      
     |      
     |      GrabOne() can be used to together with the CAcquireSingleFrameConfiguration.  
     |      
     |      note: Using GrabOne is more efficient if the Pylon device is already open,
     |          otherwise the Pylon device is opened and closed for each call.  
     |      
     |          Grabbing single images using Software Trigger
     |          (CSoftwareTriggerConfiguration) is recommended if you want to maximize frame
     |          rate. This is because the overhead per grabbed image is reduced compared to
     |          Single Frame Acquisition. The grabbing can be started using StartGrabbing().
     |          Images are grabbed using the WaitForFrameTriggerReady(),
     |          ExecuteSoftwareTrigger() and RetrieveResult() methods instead of using
     |          GrabOne. The grab can be stopped using StopGrabbing() when done.  
     |      
     |      Parameters
     |      ----------
     |      * `timeoutMs` :  
     |          A timeout value in ms for waiting for a grab result, or the INFINITE value.  
     |      * `grabResult` :  
     |          Receives the grab result.  
     |      * `timeoutHandling` :  
     |          If timeoutHandling equals TimeoutHandling_ThrowException, a timeout
     |          exception is thrown on timeout.  
     |      
     |      Returns
     |      -------
     |      Returns true if the call successfully retrieved a grab result and the grab
     |      succeeded (CGrabResultData::GrabSucceeded()).  
     |      
     |      pre: Must meet the preconditions of start grabbing.  
     |      
     |      post: Meets the postconditions of stop grabbing.  
     |      
     |      The Instant Camera object is still valid after error. See StartGrabbing(),
     |      RetrieveResult(), and StopGrabbing() . In the case of exceptions after
     |      StartGrabbing() the grabbing is stopped using StopGrabbing().
     |  
     |  HasOwnership(self) -> 'bool'
     |      Returns the ownership of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      True if a Pylon device is attached and the Instant Camera object has been given
     |      the ownership by passing the cleanup procedure Cleanup_Delete when calling
     |      Attach().  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  Is1394(self) -> 'bool'
     |      Returns true if an IEEE 1394 Pylon device is attached to the Instant Camera
     |      object.  
     |      
     |      This method is provided for convenience only. The device type can also be
     |      determined as shown in the following example.  
     |      
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsBcon(self) -> 'bool'
     |      Returns true if a BCON Pylon device is attached to the Instant Camera object.  
     |      
     |      This method is provided for convenience only. The device type can also be
     |      determined as shown in the following example.  
     |      
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsCameraDeviceRemoved(self) -> 'bool'
     |      Returns the connection state of the camera device.  
     |      
     |      The device removal is only detected while the Instant Camera and therefore the
     |      attached Pylon device are open.  
     |      
     |      The attached Pylon device is not operable anymore if the camera device has been
     |      removed from the PC. After it is made sure that no access to the Pylon device or
     |      any of its node maps is made anymore the Pylon device should be destroyed using
     |      InstantCamera::DeviceDestroy(). The access to the Pylon device can be protected
     |      using the lock provided by GetLock(), e.g. when accessing parameters.  
     |      
     |      Returns
     |      -------
     |      True if the camera device removal from the PC has been detected.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsCameraLink(self) -> 'bool'
     |      Returns true if a Camera Link Pylon device is attached to the Instant Camera
     |      object.  
     |      
     |      This method is provided for convenience only. The device type can also be
     |      determined as shown in the following example.  
     |      
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsGigE(self) -> 'bool'
     |      Returns true if a GigE Pylon device is attached to the Instant Camera object.  
     |      
     |      This method is provided for convenience only. The device type can also be
     |      determined as shown in the following example.  
     |      
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsGrabbing(self) -> 'bool'
     |      Returns state of grabbing.  
     |      
     |      The camera object is grabbing after a successful call to StartGrabbing() until
     |      StopGrabbing() is called.  
     |      
     |      Returns
     |      -------
     |      Returns true if still grabbing.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsOpen(self) -> 'bool'
     |      Returns the open state of the Pylon device.  Does not throw C++ exceptions.  
     |      
     |      Returns
     |      -------
     |      Returns true if a Pylon device is attached and it is open.  This method is
     |      synchronized using the lock provided by GetLock().
     |  
     |  IsPylonDeviceAttached(self) -> 'bool'
     |      Returns the Pylon device attached state of the Instant Camera object.  
     |      
     |      Returns
     |      -------
     |      True if a Pylon device is attached.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  IsUsb(self) -> 'bool'
     |      Returns true if a USB Pylon device is attached to the Instant Camera object.  
     |      
     |      This method is provided for convenience only. The device type can also be
     |      determined as shown in the following example.  
     |      
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  Open(self) -> 'void'
     |      Opens the attached Pylon device.  
     |      
     |      *   Opened by user flag is set, preventing closing of the device on
     |          StopGrabbing().  
     |      *   If the Pylon device is already open, nothing more is done.  
     |      *   The OnOpen configuration event is fired. The notification of event handlers
     |          stops when an event call triggers an exception.  
     |      *   The Pylon device is opened.  
     |      *   A device removal call back is registered at the Pylon device.  
     |      *   Callbacks for camera events are registered at the camera node map.  
     |      *   The OnOpened configuration event is fired if the Pylon device has been
     |          opened successfully. The notification of event handlers stops when an event
     |          call triggers an exception.  
     |      
     |      pre: A Pylon device is attached.  
     |      
     |      post:  
     |      
     |          *   The Pylon device is open.  
     |          *   Opened by user flag is set, preventing closing of the Pylon device on
     |              StopGrabbing().  
     |      
     |      The Instant Camera object is still valid after error. The Pylon device open may
     |      throw. Configuration event calls may throw. Callback registrations may throw.
     |      The Pylon device is closed with Close() if the OnOpened event call triggers an
     |      exception.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  RegisterCameraEventHandler(self, *args) -> 'void'
     |      Adds an camera event handler to the list of registered camera event handler
     |      objects.  
     |      
     |      *   If mode equals RegistrationMode_ReplaceAll, the list of registered camera
     |          event handlers is cleared.  
     |      *   If the pointer `pCameraEventHandler` is not NULL, it is appended to the list
     |          of camera event handlers.  
     |      
     |      Parameters
     |      ----------
     |      * `pCameraEventHandler` :  
     |          The receiver of camera events.  
     |      * `nodeName` :  
     |          The name of the event data node updated on camera event, e.g.
     |          "ExposureEndEventTimestamp" for exposure end event.  
     |      * `userProvidedId` :  
     |          This ID is passed as a parameter in CCameraEventHandler::OnCameraEvent and
     |          can be used to distinguish between different events. It is recommended to
     |          create an own application specific enum and use it's values as IDs.  
     |      * `mode` :  
     |          Indicates how to register the new cameraEventHandler.  
     |      * `cleanupProcedure` :  
     |          If cleanupProcedure equals Cleanup_Delete, the passed event handler is
     |          deleted when no longer needed.  
     |      * `availability` :  
     |          If availability equals CameraEventAvailability_Mandatory, the camera must
     |          support the data node specified by node name. If not, an exception is thrown
     |          when the Instant Camera is open, the Instant Camera is opened, or an open
     |          Pylon device is attached.  
     |      
     |      Internally, a GenApi node call back is registered for the node identified by
     |      `nodeName`. This callback triggers a call to the
     |      `CCameraEventHandler::OnCameraEvent()` method. That's why a Camera Event Handler
     |      can be registered for any node of the camera node map to get informed about
     |      changes.  
     |      
     |      post: The cameraEventHandler is registered and called on camera events.  
     |      
     |      Throws an exception if the availability is set to
     |      CameraEventAvailability_Mandatory and the node with the name `nodeName` is not
     |      available in the camera node map (see GetNodeMap()). Throws an exception fail if
     |      the node callback registration fails. The event handler is not registered when
     |      an C++ exception is thrown.  
     |      
     |      This method is synchronized using the camera event handler lock. If the camera
     |      is open, the lock provided by GetLock() and the camera node map lock are also
     |      used for synchronization.
     |  
     |  RegisterConfiguration(self, pConfigurator: 'ConfigurationEventHandler', mode: 'Pylon::ERegistrationMode', cleanupProcedure: 'Pylon::ECleanup') -> 'void'
     |      Adds a configurator to the list of registered configurator objects.  
     |      
     |      *   If mode equals RegistrationMode_ReplaceAll, the list of registered
     |          configurators is cleared.  
     |      *   If pointer `pConfigurator` is not NULL, it is appended to the list of
     |          configurators.  
     |      
     |      Parameters
     |      ----------
     |      * `pConfigurator` :  
     |          The receiver of configuration events.  
     |      * `mode` :  
     |          Indicates how to register the new configurator.  
     |      * `cleanupProcedure` :  
     |          If cleanupProcedure equals Cleanup_Delete, the passed event handler is
     |          deleted when no longer needed.  
     |      
     |      post: The configurator is registered and called on configuration events.  
     |      
     |      Does not throw C++ exceptions, except when memory allocation fails.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  RegisterImageEventHandler(self, pImageEventHandler: 'ImageEventHandler', mode: 'Pylon::ERegistrationMode', cleanupProcedure: 'Pylon::ECleanup') -> 'void'
     |      Adds an image event handler to the list of registered image event handler
     |      objects.  
     |      
     |      *   If mode equals RegistrationMode_ReplaceAll, the list of registered image
     |          event handlers is cleared.  
     |      *   If pointer `pImageEventHandler` is not NULL, it is appended to the list of
     |          image event handlers.  
     |      
     |      Parameters
     |      ----------
     |      * `pImageEventHandler` :  
     |          The receiver of image events.  
     |      * `mode` :  
     |          Indicates how to register the new imageEventHandler.  
     |      * `cleanupProcedure` :  
     |          If cleanupProcedure equals Cleanup_Delete, the passed event handler is
     |          deleted when no longer needed.  
     |      
     |      post: The imageEventHandler is registered and called on image related events.  
     |      
     |      Does not throw C++ exceptions, except when memory allocation fails.  
     |      
     |      This method is synchronized using the internal image event handler registry
     |      lock.
     |  
     |  RetrieveResult(self, *args) -> 'bool'
     |      Retrieves a grab result according to the strategy, waits if it is not yet
     |      available.  
     |      
     |      *   The content of the passed grab result is released.  
     |      *   If no Pylon device is attached or the grabbing is not started, the method
     |          returns immediately "false".  
     |      *   Wait for a grab result if it is not yet available. The access to the camera
     |          is not locked during waiting. Camera events are handled.  
     |      *   Only if camera events are used: Incoming camera events are handled.  
     |      *   One grab result is retrieved per call according to the strategy applied.  
     |      *   Only if chunk mode is used: The chunk data parsing is performed. The grab
     |          result data is updated using chunk data.  
     |      *   The image event OnImagesSkipped is fired if grab results have been skipped
     |          according to the strategy. The notification of event handlers stops when an
     |          event call triggers an exception.  
     |      *   The image event OnImageGrabbed is fired if a grab result becomes available.
     |          The notification of event handlers stops when an event call triggers an
     |          exception.  
     |      *   Stops the grabbing by calling StopGrabbing() if the maximum number of images
     |          has been grabbed.  
     |      
     |      It needs to be checked whether the grab represented by the grab result has been
     |      successful, see CGrabResultData::GrabSucceeded().  
     |      
     |      Parameters
     |      ----------
     |      * `timeoutMs` :  
     |          A timeout value in ms for waiting for a grab result, or the INFINITE value.  
     |      * `grabResult` :  
     |          Receives the grab result.  
     |      * `timeoutHandling` :  
     |          If timeoutHandling equals TimeoutHandling_ThrowException, a timeout
     |          exception is thrown on timeout.  
     |      
     |      Returns
     |      -------
     |      True if the call successfully retrieved a grab result, false otherwise.  
     |      
     |      pre:  
     |      
     |          *   There is no other thread waiting for a result. This will be the case
     |              when the Instant Camera grab loop thread is used.  
     |      
     |      post:  
     |      
     |          *   If a grab result has been retrieved, one image is removed from the
     |              output queue and is returned in the grabResult parameter.  
     |          *   If no grab result has been retrieved, an empty grab result is returned
     |              in the grabResult parameter.  
     |          *   If the maximum number of images has been grabbed, the grabbing is
     |              stopped.  
     |          *   If camera event handling is enabled and camera events were received, at
     |              least one or more camera event messages have been processed.  
     |      
     |      The Instant Camera object is still valid after error. The grabbing is stopped if
     |      an exception is thrown.  
     |      
     |      This method is synchronized using the lock provided by GetLock() while not
     |      waiting.
     |  
     |  SetBufferFactory(self, *args) -> 'void'
     |      Sets an alternative buffer factory that is used for buffer allocation.  
     |      
     |      This use of this method is optional and intended for advanced use cases only.  
     |      
     |      If NULL is passed as buffer factory then the default buffer factory is used.
     |      Buffers are allocated when StartGrabbing is called. A buffer factory must not be
     |      deleted while it is attached to the camera object and it must not be deleted
     |      until the last buffer is freed. To free all buffers the grab needs to be stopped
     |      and all grab results must be released or destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `pFactory` :  
     |          A pointer to a buffer factory.  
     |      * `cleanupProcedure` :  
     |          If ownership is cleanupProcedure Cleanup_Delete, the passed factory is
     |          destroyed when no longer needed.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  SetCameraContext(self, context: 'intptr_t') -> 'void'
     |      Sets a context that is attached to each grab result of the camera object on
     |      RetrieveResult(). This is useful when handling multiple cameras. It has nothing
     |      in common with the context passed to the stream grabber when queuing a buffer.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  StartGrabbing(self, *args) -> 'void'
     |      Starts the grabbing for a maximum number of images.  
     |      
     |      Extends the StartGrabbing(EStrategy, EGrabLoop) by a number of images to grab.
     |      If the passed count of images has been reached, StopGrabbing is called
     |      automatically. The images are counted according to the grab strategy. Skipped
     |      images are not taken into account.  
     |      
     |      The amount of allocated buffers is reduced to maxImages when grabbing fewer
     |      images than according to the value of the `MaxNumBuffer`  parameter and the grab
     |      strategy is GrabStrategy_OneByOne.  
     |      
     |      Parameters
     |      ----------
     |      * `maxImages` :  
     |          The count of images to grab. This value must be larger than zero.  
     |      * `strategy` :  
     |          The grab strategy. See Pylon::InstantCamera::EStrategy for more information.  
     |      * `grabLoopType` :  
     |          If grabLoopType equals GrabLoop_ProvidedByInstantCamera, an additional grab
     |          loop thread is used to run the grab loop.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  StartGrabbingMax(self, *args) -> 'void'
     |      Starts the grabbing for a maximum number of images.  
     |      
     |      Extends the StartGrabbing(EStrategy, EGrabLoop) by a number of images to grab.
     |      If the passed count of images has been reached, StopGrabbing is called
     |      automatically. The images are counted according to the grab strategy. Skipped
     |      images are not taken into account.  
     |      
     |      The amount of allocated buffers is reduced to maxImages when grabbing fewer
     |      images than according to the value of the `MaxNumBuffer`  parameter and the grab
     |      strategy is GrabStrategy_OneByOne.  
     |      
     |      Parameters
     |      ----------
     |      * `maxImages` :  
     |          The count of images to grab. This value must be larger than zero.  
     |      * `strategy` :  
     |          The grab strategy. See Pylon::InstantCamera::EStrategy for more information.  
     |      * `grabLoopType` :  
     |          If grabLoopType equals GrabLoop_ProvidedByInstantCamera, an additional grab
     |          loop thread is used to run the grab loop.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  StopGrabbing(self) -> 'void'
     |      Stops the grabbing of images.  
     |      
     |      *   Nothing is done if the Instant Camera is not currently grabbing.  
     |      *   The configuration event OnGrabStop is fired. Possible C++ exceptions from
     |          event calls are caught and ignored. All event handlers are notified.  
     |      *   The grabbing is stopped.  
     |      *   All buffer queues of the Instant Camera are cleared.  
     |      *   The OnGrabStopped configuration event is fired if the grab has been stopped
     |          successfully. Possible C++ exceptions from event calls are caught and
     |          ignored. All event handlers are notified.  
     |      *   If the Instant Camera has been opened by StartGrabbing, it is closed by
     |          calling Close().  
     |      *   Grab-specific parameters of the camera object are unlocked, e.g.
     |          MaxNumBuffers.  
     |      
     |      post:  
     |      
     |          *   The grabbing is stopped.  
     |          *   If the Pylon device has been opened by StartGrabbing and no other camera
     |              object service requires it to be open, it is closed.  
     |          *   Grab specific parameters of the camera object are unlocked, e.g.
     |              MaxNumBuffers.  
     |      
     |      Does not throw C++ exceptions. Possible C++ exceptions are caught and ignored.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  WaitForFrameTriggerReady(self, *args) -> 'bool'
     |      Actively waits until the the camera is ready to accept a frame trigger.  
     |      
     |      The implementation selects 'FrameTriggerWait' for the
     |      'AcquisitionStatusSelector' and waits until the 'AcquisitionStatus' is true. If
     |      the above mentioned nodes are not available and the 'SoftwareTrigger' node is
     |      readable, the implementation waits for SoftwareTrigger.IsDone().  
     |      
     |      The WaitForFrameTriggerReady method does not work for A600 Firewire cameras.  
     |      
     |      Parameters
     |      ----------
     |      * `timeoutMs` :  
     |          The timeout in ms for active waiting.  
     |      * `timeoutHandling` :  
     |          If timeoutHandling equals TimeoutHandling_ThrowException, a timeout
     |          exception is thrown on timeout.  
     |      
     |      Returns
     |      -------
     |      True if the camera can execute a frame trigger.  
     |      
     |      pre: The 'AcquisitionStatusSelector' node is writable and the
     |          'AcquisitionStatus' node is readable or the 'SoftwareTrigger' node is
     |          readable. This depends on the used camera model.  
     |      
     |      Accessing the camera registers may fail.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  __del__ lambda self
     |  
     |  __dir__(self)
     |      Default dir() implementation.
     |  
     |  __getattr__(self, attribute)
     |  
     |  __init__(self, *args)
     |      Creates an Instant Camera object and calls Attach().  
     |      
     |      See Attach() for more information.  
     |      
     |      Parameters
     |      ----------
     |      * `pDevice` :  
     |          The Pylon device to attach.  
     |      * `cleanupProcedure` :  
     |          If cleanupProcedure equals Cleanup_Delete, the Pylon device is destroyed
     |          when the Instant Camera object is destroyed.  
     |      
     |      May throw an exception if the passed Pylon device is open. Does not throw C++
     |      exceptions if the passed Pylon device is closed or NULL.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__(self, attribute, val)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_InstantCamera(...)
     |      Destroys an Instant Camera object.  
     |      
     |      Calls Attach( NULL) for destroying or removing a Pylon device depending on the
     |      passed cleanup procedure.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  CameraContext
     |      Returns the context that is attached to each grab result of the camera object.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  DeviceInfo
     |      Provides access to the device info object of the attached Pylon device or an
     |      empty one.  
     |      
     |      Returns
     |      -------
     |      The info object of the attached Pylon device or an empty one.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  EventGrabber
     |  
     |  EventGrabberNodeMap
     |      Provides access to the event grabber node map of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      Reference to the event grabber node map of the attached Pylon device or a
     |      reference to the empty node map if event grabbing is not supported. The
     |      GENAPI_NAMESPACE::INodeMap::GetNumNodes() method can be used to check whether
     |      the node map is empty.  
     |      
     |      pre:  
     |      
     |          *   A Pylon device is attached.  
     |          *   The Pylon device is open.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  InstantCameraNodeMap
     |      Provides access to the node map of the Instant Camera object.  
     |      
     |      The node map of the camera device is made available by the GetNodeMap() method.  
     |      
     |      Returns
     |      -------
     |      Reference to the node map of the Instant Camera object.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  NodeMap
     |      Provides access to the node map of the camera device.  
     |      
     |      The Pylon device must be opened before reading ore writing any parameters of the
     |      camera device. This can be done using the Open() method of the Instant Camera
     |      class.  
     |      
     |      Returns
     |      -------
     |      Reference to the node map of the camera device.  
     |      
     |      pre: A Pylon device is attached.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  QueuedBufferCount
     |      Deprecated: This method has been deprecated. Use the NumQueuedBuffers parameter
     |      instead.  
     |      
     |      Returns
     |      -------
     |      The number of buffers that are queued for grabbing.
     |  
     |  StreamGrabber
     |  
     |  StreamGrabberNodeMap
     |      Provides access to the stream grabber node map of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      Reference to the stream grabber node map of the attached Pylon device or the
     |      reference to the empty node map if grabbing is not supported. The
     |      GENAPI_NAMESPACE::INodeMap::GetNumNodes() method can be used to check whether
     |      the node map is empty.  
     |      
     |      pre:  
     |      
     |          *   A Pylon device is attached.  
     |          *   The Pylon device is open.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  TLNodeMap
     |      Provides access to the transport layer node map of the attached Pylon device.  
     |      
     |      Returns
     |      -------
     |      Reference to the transport layer node map of the attached Pylon device or the
     |      reference to the empty node map if a transport layer node map is not supported.
     |      The GENAPI_NAMESPACE::INodeMap::GetNumNodes() method can be used to check
     |      whether the node map is empty.  
     |      
     |      pre: A Pylon device is attached.  
     |      
     |      The Instant Camera object is still valid after error.  
     |      
     |      This method is synchronized using the lock provided by GetLock().
     |  
     |  TransportLayer
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from InstantCameraParams_Params:
     |  
     |  ChunkNodeMapsEnable
     |  
     |  GrabCameraEvents
     |  
     |  GrabLoopThreadPriority
     |  
     |  GrabLoopThreadPriorityOverride
     |  
     |  GrabLoopThreadTimeout
     |  
     |  GrabLoopThreadUseTimeout
     |  
     |  InternalGrabEngineThreadPriority
     |  
     |  InternalGrabEngineThreadPriorityOverride
     |  
     |  MaxNumBuffer
     |  
     |  MaxNumGrabResults
     |  
     |  MaxNumQueuedBuffer
     |  
     |  MonitorModeActive
     |  
     |  NumEmptyBuffers
     |  
     |  NumQueuedBuffers
     |  
     |  NumReadyBuffers
     |  
     |  OutputQueueSize
     |  
     |  StaticChunkNodeMapPoolSize
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class InstantCameraArray(builtins.object)
     |  InstantCameraArray(*args)
     |  
     |  Supports grabbing with multiple camera devices.  
     |  
     |  The CInstantCameraArray class is not thread-safe.  
     |  
     |  C++ includes: InstantCameraArray.h
     |  
     |  Methods defined here:
     |  
     |  Close(self) -> 'void'
     |      Closes all cameras in the array.  
     |      
     |      *   If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      *   Close is called for all cameras, see CInstantCamera::Close() for more
     |          information.  
     |      
     |      post: All cameras in the array are closed.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  DestroyDevice(self) -> 'void'
     |      Destroys the Pylon Devices that are attached to the Instant Cameras in the
     |      array.  
     |      
     |      attention: The node maps, e.g. the camera node map, of the attached Pylon Device
     |          must not be accessed anymore while destroying the Pylon Device.  
     |      
     |      *   If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      *   DestroyDevice is called for all cameras. See CInstantCamera::DestroyDevice()
     |          for more information.  
     |      
     |      post: No Pylon Devices are attached to the cameras in the array.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  DetachDevice(self) -> 'void'
     |      Detaches all Pylon Devices that are attached to the Instant Cameras in the
     |      array.  
     |      
     |      *   If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      *   DetachDevice is called for all cameras, see CInstantCamera::DetachDevice()
     |          for more information.  
     |      
     |      post:  
     |      
     |          *   No Pylon Devices are attached to the cameras in the array.  
     |          *   The ownership of the Pylon Devices goes to the caller who is responsible
     |              for destroying the Pylon Devices.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  GetSize(self) -> 'size_t'
     |      Returns the size of the array.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  Initialize(self, numberOfCameras: 'size_t') -> 'void'
     |      Initializes the array.  
     |      
     |      *   If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      *   All cameras of the array are destroyed.  
     |      *   A new set of cameras is created. No Pylon Devices are attached.  
     |      *   The camera context values are set to the index of the camera in the array
     |          using CInstantCamera::SetCameraContext.  
     |      
     |      The index operator can be used to access the individual cameras for attaching a
     |      Pylon Device or for configuration.  
     |      
     |      Parameters
     |      ----------
     |      * `numberOfCameras` :  
     |          The number of cameras the array shall hold.  
     |      
     |      Does not throw C++ exceptions, except when memory allocation fails.
     |  
     |  IsCameraDeviceRemoved(self) -> 'bool'
     |      Returns the connection state of the camera devices used by the Instant Cameras
     |      in the array.  
     |      
     |      The device removal is only detected if the Instant Cameras and therefore the
     |      attached Pylon Devices are open.  
     |      
     |      The Pylon Device is not operable after this event. After it is made sure that no
     |      access to the Pylon Device or any of its node maps is made anymore the Pylon
     |      Device should be destroyed using InstantCamera::DeviceDestroy(). The access to
     |      the Pylon Device can be protected using the lock provided by GetLock(), e.g.
     |      when accessing parameters.  
     |      
     |      Returns
     |      -------
     |      True if the camera device removal from the PC for any camera in the array has
     |      been detected.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  IsGrabbing(self) -> 'bool'
     |      Returns state of grabbing.  
     |      
     |      The camera array is grabbing after a successful call to StartGrabbing() until
     |      StopGrabbing() has been called.  
     |      
     |      Returns
     |      -------
     |      Returns true if still grabbing.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  IsOpen(self) -> 'bool'
     |      Returns the open state of the cameras in the array.  Does not throw C++
     |      exceptions.  
     |      
     |      Returns
     |      -------
     |      Returns true if all cameras in the array are open. False is returned if the size
     |      of the array is 0.
     |  
     |  IsPylonDeviceAttached(self) -> 'bool'
     |      Returns the attachment state of cameras in the array.  
     |      
     |      Returns
     |      -------
     |      True if all cameras in the array have a Pylon Device attached. False is returned
     |      if the size of the array is 0.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  Open(self) -> 'void'
     |      Opens all cameras in the array.  
     |      
     |      Open is called for all cameras. See CInstantCamera::Open() for more information.  
     |      
     |      pre:  
     |      
     |          *   The size of the array is larger than 0.  
     |          *   All devices are attached.  
     |      
     |      post: The cameras are open.  
     |      
     |      If one camera throws an exception, all cameras are closed by calling Close().
     |  
     |  RetrieveResult(self, *args) -> 'bool'
     |      Retrieves a grab result according to the strategy, waits if it is not yet
     |      available.  
     |      
     |      *   The content of the passed grab result is released.  
     |      *   If the grabbing is not started, the method returns immediately false.  
     |      *   If GrabStrategy_UpcomingImage strategy: RetrieveResult is called for a
     |          camera. Cameras are processed using a round-robin strategy.  
     |      *   If GrabStrategy_OneByOne, GrabStrategy_LatestImageOnly or
     |          GrabStrategy_LatestImages strategy: Pending images or camera events are
     |          retrieved. Cameras are processed using a round-robin strategy.  
     |      *   If GrabStrategy_OneByOne, GrabStrategy_LatestImageOnly or
     |          GrabStrategy_LatestImages strategy: Wait for a grab result if it is not yet
     |          available. Camera events are handled.  
     |      
     |      The camera array index is assigned to the context value of the instant camera
     |      when Initialize() is called. This context value is attached to the result when
     |      the result is retrieved and can be obtained using the grab result method
     |      GrabResultData::GetCameraContext(). The context value can be used to associate
     |      the result with the camera from where it originated.  
     |      
     |      Parameters
     |      ----------
     |      * `timeoutMs` :  
     |          A timeout value in ms for waiting for a grab result, or the INFINITE value.  
     |      * `grabResult` :  
     |          Receives the grab result.  
     |      * `timeoutHandling` :  
     |          If timeoutHandling equals TimeoutHandling_ThrowException, a timeout
     |          exception is thrown on timeout.  
     |      
     |      Returns
     |      -------
     |      True if the call successfully retrieved a grab result, false otherwise.  
     |      
     |      pre: The preconditions for calling StartGrabbing() are met for every camera in
     |          the array.  
     |      
     |      post:  
     |      
     |          *   If successful, one image is removed from the output queue of a camera
     |              and is returned in the grabResult parameter.  
     |          *   If not successful, an empty grab result is returned in the grabResult
     |              parameter.  
     |      
     |      The Instant Camera Array object is still valid after error. The grabbing is
     |      stopped by calling StopGrabbing() if an exception is thrown.
     |  
     |  StartGrabbing(self, *args) -> 'void'
     |      Starts the grabbing of images for all cameras.  
     |      
     |      *   StartGrabbing is called for all cameras with the provided parameters, see
     |          CInstantCamera::StartGrabbing() for more information.  
     |      *   The grabbing is started.  
     |      *   The starting position for retrieving results is set to the first camera.  
     |      
     |      Parameters
     |      ----------
     |      * `strategy` :  
     |          The grab strategy, see Pylon::InstantCamera::EStrategy for more information.  
     |      * `grabLoopType` :  
     |          Indicates using the internal grab thread of the camera.  
     |      
     |      pre:  
     |      
     |          *   The size of the array is larger than 0.  
     |          *   All devices are attached.  
     |          *   The grabbing is stopped.  
     |          *   The preconditions for calling StartGrabbing() are met for every camera
     |              in the array.  
     |      
     |      post: The grabbing is started.  
     |      
     |      The camera objects may throw an exception. The grabbing is stopped calling
     |      StopGrabbing() in this case.
     |  
     |  StopGrabbing(self) -> 'void'
     |      Stops the grabbing of images.  
     |      
     |      The grabbing is stopped. StopGrabbing is called for all cameras. See
     |      CInstantCamera::StopGrabbing() for more information.  
     |      
     |      post: The grabbing is stopped.  
     |      
     |      Does not throw C++ exceptions.  
     |      
     |      Can be called while one other thread is polling RetrieveResult() in a
     |      IsGrabbing()/RetrieveResult() loop to stop grabbing.
     |  
     |  __del__ lambda self
     |  
     |  __getitem__(self, index: 'size_t') -> 'Pylon::CInstantCamera &'
     |  
     |  __init__(self, *args)
     |      Creates an Instant Camera Array.  
     |      
     |      Calls Initialize() to adjust the size of the array.  
     |      
     |      Parameters
     |      ----------
     |      * `numberOfCameras` :  
     |          The number of cameras the array shall hold. Can be 0.  
     |      
     |      The index operator can be used to access the individual cameras for attaching a
     |      Pylon Device or for configuration.  
     |      
     |      Example:  
     |      
     |      Does not throw C++ exceptions, except when memory allocation fails.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_InstantCameraArray(...)
     |      Destroys the Instant Camera Array.  
     |      
     |      If a grab is in progress, it is stopped by calling StopGrabbing().  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class InstantCameraParams_Params(builtins.object)
     |  InstantCameraParams_Params(*args, **kwargs)
     |  
     |  Interface to instant camera parameters.  
     |  
     |  C++ includes: _InstantCameraParams.h
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ChunkNodeMapsEnable
     |  
     |  GrabCameraEvents
     |  
     |  GrabLoopThreadPriority
     |  
     |  GrabLoopThreadPriorityOverride
     |  
     |  GrabLoopThreadTimeout
     |  
     |  GrabLoopThreadUseTimeout
     |  
     |  InternalGrabEngineThreadPriority
     |  
     |  InternalGrabEngineThreadPriorityOverride
     |  
     |  MaxNumBuffer
     |  
     |  MaxNumGrabResults
     |  
     |  MaxNumQueuedBuffer
     |  
     |  MonitorModeActive
     |  
     |  NumEmptyBuffers
     |  
     |  NumQueuedBuffers
     |  
     |  NumReadyBuffers
     |  
     |  OutputQueueSize
     |  
     |  StaticChunkNodeMapPoolSize
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class InvalidArgumentException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      InvalidArgumentException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class LogicalErrorException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      LogicalErrorException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class OutOfRangeException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      OutOfRangeException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class PropertyException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      PropertyException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class PylonImage(PylonImageBase)
     |  PylonImage(*args)
     |  
     |  Describes an image.  
     |  
     |  *   Automatically handles size and lifetime of the image buffer.  
     |  *   Allows to take over a buffer of grab result which is preventing its reuse as
     |      long as required.  
     |  *   Allows to connect user buffers or buffers provided by third party software
     |      packages.  
     |  *   Provides methods for loading and saving an image in different file formats.  
     |  *   Serves as the main target format for the image format converter
     |      `CImageFormatConverter`.  
     |  *   Eases working with planar images.  
     |  *   Eases extraction of AOIs, e.g. for thumbnail images of defects.  
     |  
     |  par: Buffer Handling:
     |      The buffer that is automatically created by the CPylonImage class or a
     |      hosted grab result buffer are replaced by a larger buffer if required. The
     |      size of the allocated buffer is never decreased. Referenced user buffers are
     |      never automatically replaced by a larger buffer. Referenced grab result
     |      buffers are never reused. See the Reset() method for more details. The
     |      Release() method can be used to detach a user buffer, release a hosted grab
     |      result buffer or to free an allocated buffer.  
     |  
     |  The CPylonImage class is not thread-safe.  
     |  
     |  C++ includes: PylonImage.h
     |  
     |  Method resolution order:
     |      PylonImage
     |      PylonImageBase
     |      IReusableImage
     |      Image
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AttachGrabResultBuffer(self, grabResult: 'GrabResult') -> 'void'
     |      Attaches a grab result buffer.  
     |      
     |      Parameters
     |      ----------
     |      * `grabResult` :  
     |          The source image represented by a grab result.  
     |      
     |      post:  
     |      
     |          *   The image properties are taken over from the grab result.  
     |          *   The grab result buffer is used by the image class.  
     |          *   Another reference to the grab result buffer is created. This prevents
     |              the buffer's reuse for grabbing.  
     |          *   Creates an invalid image if the `grabResult` is invalid.  
     |          *   Creates an invalid image if the grab was not successful. See
     |              CGrabResultData::GrabSucceeded().  
     |      
     |      Throws an exception when no buffer with the required size could be allocated.
     |      Throws an exception when the preconditions of the Reset() method are not met.
     |  
     |  AttachUserBuffer(self, *args) -> 'void'
     |      Attaches a user buffer.  
     |      
     |      Parameters
     |      ----------
     |      * `pBuffer` :  
     |          The pointer to the buffer of the source image.  
     |      * `bufferSizeBytes` :  
     |          The size of the buffer of the source image.  
     |      * `pixelType` :  
     |          The pixel type of the source image.  
     |      * `width` :  
     |          The number of pixels in a row in the source image.  
     |      * `height` :  
     |          The number of rows in the source image.  
     |      * `paddingX` :  
     |          The number of extra data bytes at the end of each row.  
     |      * `orientation` :  
     |          The vertical orientation of the image in the image buffer.  
     |      
     |      pre:  
     |      
     |          *   The pixel type must be valid.  
     |          *   The `width` value must be >= 0 and < _I32_MAX.  
     |          *   The `height` value must be >= 0 and < _I32_MAX.  
     |          *   The pointer to the source buffer must not be NULL.  
     |          *   The source buffer must be large enough to hold the image described by
     |              the parameters.  
     |      
     |      post:  
     |      
     |          *   The image properties are taken over from the passed parameters.  
     |          *   The user buffer is used by the image class.  
     |          *   The buffer must not be freed while being attached.  
     |      
     |      Throws an exception if the preconditions are not met.
     |  
     |  ChangePixelType(self, pixelType: 'Pylon::EPixelType') -> 'void'
     |      Changes the pixel type of the image.  
     |      
     |      Parameters
     |      ----------
     |      * `pixelType` :  
     |          The new pixel type.  
     |      
     |      pre:  
     |      
     |          *   Pylon::SamplesPerPixel( oldPixelType) == Pylon::SamplesPerPixel(
     |              newPixelType)  
     |          *   Pylon::BitPerPixel( oldPixelType) == Pylon::BitPerPixel( newPixelType)  
     |      
     |      Throws an exception when the new pixel type properties do not match the existing
     |      ones.
     |  
     |  CopyImage(self, *args) -> 'void'
     |      Copies the image data from a provided buffer.  
     |      
     |      This method is used for making a full copy of an image. Calls the Reset() method
     |      to set the same image properties as the source image and copies the image data.  
     |      
     |      Parameters
     |      ----------
     |      * `pBuffer` :  
     |          The pointer to the buffer of the source image.  
     |      * `bufferSizeBytes` :  
     |          The size of the buffer of the source image.  
     |      * `pixelType` :  
     |          The pixel type of the source image.  
     |      * `width` :  
     |          The number of pixels in a row in the source image.  
     |      * `height` :  
     |          The number of rows in the source image.  
     |      * `paddingX` :  
     |          The number of extra data bytes at the end of each row.  
     |      * `orientation` :  
     |          The vertical orientation of the image in the image buffer.  
     |      
     |      pre:  
     |      
     |          *   The pixel type must be valid.  
     |          *   The `width` value must be >= 0 and < _I32_MAX.  
     |          *   The `height` value must be >= 0 and < _I32_MAX.  
     |          *   The pointer to the source buffer must not be NULL.  
     |          *   The source buffer must be large enough to hold the image described by
     |              the parameters.  
     |          *   The preconditions of the Reset() method must be met.  
     |      
     |      post: A copy of the image contained by the source image buffer is made.  
     |      
     |      Throws an exception when no buffer with the required size could be allocated.
     |      Throws an exception when the preconditions of the Reset() method are not met.
     |  
     |  GetAllocatedBufferSize(self) -> 'size_t'
     |      Returns the size of the used buffer.  
     |      
     |      This method is useful when working with so-called user buffers.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  GetAoi(self, topLeftX: 'uint32_t', topLeftY: 'uint32_t', width: 'uint32_t', height: 'uint32_t') -> 'Pylon::CPylonImage'
     |      Creates a new pylon image for an image area of interest (Image AOI) derived from
     |      the image. No image data is copied.  
     |      
     |      Use CopyImage( const IImage& image, size_t newPaddingX) to create a full copy
     |      and to remove the additional padding.  
     |      
     |      
     |      Parameters
     |      ----------
     |      * `topLeftX` :  
     |          The x-coordinate of the top left corner of the image AOI in pixels.  
     |      * `topLeftY` :  
     |          The y-coordinate of the top left corner of the image AOI in pixels.  
     |      * `width` :  
     |          The width of the image AOI in pixels.  
     |      * `height` :  
     |          The height of the image AOI in pixels.  
     |      
     |      Returns
     |      -------
     |      A pylon image referencing an image AOI of the image.  
     |      
     |      pre:  
     |      
     |          *   The image must be valid.  
     |          *   The image AOI is located inside the image.  
     |          *   The image is not in a planar format, see Pylon::IsPlanar(). Use
     |              GetPlane() first in this case.  
     |          *   The rows of the image must be byte aligned. This may not be the case for
     |              packed pixel types. See Pylon::IsPacked().  
     |          *   The x-coordinate must be byte aligned. This may not be the case for
     |              packed pixel types. See Pylon::IsPacked().  
     |          *   The `topLeftX` parameter must be divisible by the return value of
     |              Pylon::GetPixelIncrementX() for the image's pixel type.  
     |          *   The `topLeftY` parameter must be divisible by the return value of
     |              Pylon::GetPixelIncrementY() for the image's pixel type.  
     |      
     |      post:  
     |      
     |          *   A reference to the same buffer is created. The image data is not copied.  
     |          *   The returned image uses the paddingX property to skip over image content
     |              outside of the image AOI.  
     |      
     |      Throws an exception when the preconditions are not met.
     |  
     |  GetArray = func_wrapper(*args, **kwargs)
     |  
     |  GetBuffer(self) -> 'void'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |  
     |  GetImageFormat = func_wrapper(*args, **kwargs)
     |  
     |  GetImageSize(self) -> 'size_t'
     |  
     |  GetOrientation(self) -> 'Pylon::EImageOrientation'
     |  
     |  GetPaddingX(self) -> 'size_t'
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |  
     |  GetPlane(self, planeIndex: 'size_t') -> 'Pylon::CPylonImage'
     |      Creates a new pylon image for a plane of the image. No image data is copied.  
     |      
     |      Use CopyImage( const IImage& image) to create a full copy.  
     |      
     |      
     |      Parameters
     |      ----------
     |      * `planeIndex` :  
     |          The zero based index of the plane.  
     |      
     |      Returns
     |      -------
     |      A pylon image referencing a plane of the image.  
     |      
     |      pre: The value of planeIndex < Pylon::PlaneCount( GetPixelType()).  
     |      
     |      post:  
     |      
     |          *   A reference to the same buffer is created. No image data is copied.  
     |          *   The returned image has the Pylon::GetPlanePixelType( GetPixelType())
     |              pixel type.  
     |          *   If the image is not planar only index 0 is allowed. A call passing index
     |              0 returns a copy of the image. No image data is copied.  
     |      
     |      Throws an exception when the plane index is out of range.
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |  
     |  GetWidth(self) -> 'uint32_t'
     |  
     |  IsAdditionalPaddingSupported(self) -> 'bool'
     |  
     |  IsGrabResultBufferAttached(self) -> 'bool'
     |      Returns true if the referenced buffer has been provided by a grab result.
     |  
     |  IsSupportedPixelType(self, pixelType: 'Pylon::EPixelType') -> 'bool'
     |  
     |  IsUnique(self) -> 'bool'
     |  
     |  IsUserBufferAttached(self) -> 'bool'
     |      Returns true if the referenced buffer has been provided by the user.
     |  
     |  IsValid(self) -> 'bool'
     |  
     |  Release(self) -> 'void'
     |  
     |  Reset(self, *args) -> 'void'
     |      Extends the Reset( EPixelType, uint32_t, uint32_t, EImageOrientation) method by
     |      settable paddingX.  
     |      
     |      
     |      Parameters
     |      ----------
     |      * `pixelType` :  
     |          The pixel type of the new image.  
     |      * `width` :  
     |          The number of pixels in a row in the new image.  
     |      * `height` :  
     |          The number of rows in the new image.  
     |      * `orientation` :  
     |          The vertical orientation of the image in the image buffer.  
     |      
     |      pre:  
     |      
     |          *   The `width` value must be >= 0 and < _I32_MAX.  
     |          *   The `height` value must be >= 0 and < _I32_MAX.  
     |          *   If a user buffer is referenced then this buffer must not be referenced
     |              by another pylon image. See the IsUnique() and IsUserBufferAttached()
     |              methods.  
     |          *   If a user buffer is referenced then this buffer must be large enough to
     |              hold the destination image. See the GetAllocatedBufferSize() and
     |              IsUserBufferAttached() methods.  
     |      
     |      post:  
     |      
     |          *   If the previously referenced buffer is a grab result buffer, a new
     |              buffer has been allocated.  
     |          *   If the previously referenced buffer is also referenced by another pylon
     |              image, a new buffer has been allocated.  
     |          *   If the previously referenced buffer is not large enough to hold an image
     |              with the given properties, a new buffer has been allocated.  
     |          *   If no buffer has been allocated before, a buffer has been allocated.  
     |      
     |      Throws an exception when the preconditions are not met. Throws an exception when
     |      no buffer with the required size could be allocated.  
     |      
     |      Parameters
     |      ----------
     |      * `paddingX` :  
     |          The number of extra data bytes at the end of each row.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args)
     |      Copies the image properties and creates a reference to the buffer of the source
     |      image.  
     |      
     |      Parameters
     |      ----------
     |      * `source` :  
     |          The source image.  
     |      
     |      post:  
     |      
     |          *   Another reference to the source image buffer is created.  
     |          *   Creates an invalid image if the source image is invalid.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Create(*args) -> 'Pylon::CPylonImage'
     |      Creates an image and allocates a buffer for it.  
     |      
     |      Parameters
     |      ----------
     |      * `pixelType` :  
     |          The pixel type of the new image.  
     |      * `width` :  
     |          The number of pixels in a row in the new image.  
     |      * `height` :  
     |          The number of rows in the new image.  
     |      * `paddingX` :  
     |          The number of extra data bytes at the end of each row.  
     |      * `orientation` :  
     |          The vertical orientation of the image in the image buffer.  
     |      
     |      pre:  
     |      
     |          *   The pixel type must be valid.  
     |          *   The `width` value must be >= 0 and < _I32_MAX.  
     |          *   The `height` value must be >= 0 and < _I32_MAX.  
     |      
     |      Throws an exception when the parameters are invalid. Throws an exception when no
     |      buffer with the required size could be allocated.
     |  
     |  __swig_destroy__ = delete_PylonImage(...)
     |      Destroys a pylon image object.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PylonImageBase:
     |  
     |  CanSaveWithoutConversion(self, imageFileFormat: 'Pylon::EImageFileFormat') -> 'bool'
     |      Can be used to check whether the image can be saved without prior conversion.  
     |      
     |      This is a convenience method that calls
     |      CImagePersistence::CanSaveWithoutConversion().  
     |      
     |      Parameters
     |      ----------
     |      * `imageFileFormat` :  
     |          Target file format for the image to be saved.  
     |      
     |      Returns
     |      -------
     |      Returns true, if the image can be saved without prior conversion.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  GetPixelData(self, posX: 'uint32_t', posY: 'uint32_t') -> 'SPixelData'
     |      Retrieves the data of a pixel.  
     |      
     |      note: This method is relativly slow. Do not use it for image processing tasks.  
     |      
     |      Parameters
     |      ----------
     |      * `posX` :  
     |          Horizontal position of the pixel. The first column has position 0.  
     |      * `posY` :  
     |          Vertical position of the pixel. The first row has position 0.  
     |      
     |      Returns
     |      -------
     |      Returns the data of a pixel for supported pixel types. For unsupported pixel
     |      types pixel data of the SPixelData::PixelDataType_Unknown type is returned.  
     |      
     |      pre:  
     |      
     |          *   The image must be valid.  
     |          *   The pixel position defined by `posX` and `posY` must be located inside
     |              the image area.  
     |      
     |      Supported pixel types:  
     |      
     |      *   PixelType_Mono1packed  
     |      *   PixelType_Mono2packed  
     |      *   PixelType_Mono4packed  
     |      *   PixelType_Mono8  
     |      *   PixelType_Mono8signed  
     |      *   PixelType_Mono10  
     |      *   PixelType_Mono10packed  
     |      *   PixelType_Mono10p  
     |      *   PixelType_Mono12  
     |      *   PixelType_Mono12packed  
     |      *   PixelType_Mono12p  
     |      *   PixelType_Mono16  
     |      
     |      *   PixelType_BayerGR8  
     |      *   PixelType_BayerRG8  
     |      *   PixelType_BayerGB8  
     |      *   PixelType_BayerBG8  
     |      *   PixelType_BayerGR10  
     |      *   PixelType_BayerRG10  
     |      *   PixelType_BayerGB10  
     |      *   PixelType_BayerBG10  
     |      *   PixelType_BayerGR12  
     |      *   PixelType_BayerRG12  
     |      *   PixelType_BayerGB12  
     |      *   PixelType_BayerBG12  
     |      *   PixelType_BayerGR12Packed  
     |      *   PixelType_BayerRG12Packed  
     |      *   PixelType_BayerGB12Packed  
     |      *   PixelType_BayerBG12Packed  
     |      *   PixelType_BayerGR10p  
     |      *   PixelType_BayerRG10p  
     |      *   PixelType_BayerGB10p  
     |      *   PixelType_BayerBG10p  
     |      *   PixelType_BayerGR12p  
     |      *   PixelType_BayerRG12p  
     |      *   PixelType_BayerGB12p  
     |      *   PixelType_BayerBG12p  
     |      *   PixelType_BayerGR16  
     |      *   PixelType_BayerRG16  
     |      *   PixelType_BayerGB16  
     |      *   PixelType_BayerBG16  
     |      
     |      *   PixelType_RGB8packed  
     |      *   PixelType_BGR8packed  
     |      *   PixelType_RGBA8packed  
     |      *   PixelType_BGRA8packed  
     |      *   PixelType_RGB10packed  
     |      *   PixelType_BGR10packed  
     |      *   PixelType_RGB12packed  
     |      *   PixelType_BGR12packed  
     |      *   PixelType_RGB12V1packed  
     |      *   PixelType_RGB16packed  
     |      *   PixelType_RGB8planar  
     |      *   PixelType_RGB10planar  
     |      *   PixelType_RGB12planar  
     |      *   PixelType_RGB16planar  
     |      
     |      *   PixelType_YUV422packed  
     |      *   PixelType_YUV422_YUYV_Packed  
     |      
     |      Throws an exception, if the preconditions are not met.
     |  
     |  Load(self, filename: 'Pylon::String_t const &') -> 'void'
     |      Loads an image from a disk.  
     |      
     |      This is a convenience method that calls CImagePersistence::Load()  
     |      
     |      Parameters
     |      ----------
     |      * `filename` :  
     |          Name and path of the image.  
     |      
     |      pre: The image object must be able to hold the image format of the loaded image.  
     |      
     |      Throws an exception if the image cannot be loaded. The image buffer content is
     |      undefined when the loading of the image fails.
     |  
     |  Save(self, imageFileFormat: 'Pylon::EImageFileFormat', filename: 'Pylon::String_t const &', pOptions: 'ImagePersistenceOptions' = None) -> 'void'
     |      Saves the image to disk. Converts the image to a format that can be saved if
     |      required.  
     |      
     |      This is a convenience method that calls CImagePersistence::Save().  
     |      
     |      If required, the image is automatically converted into a new image and saved
     |      afterwards. See CImagePersistence::CanSaveWithoutConversion() for more
     |      information. An image with a bit depth higher than 8 bit is stored with 16 bit
     |      bit depth, if supported by the image file format. In this case the pixel data is
     |      MSB aligned.  
     |      
     |      If more control over the conversion is required, the CImageFormatConverter class
     |      can be used to convert the input image before saving it.  
     |      
     |      Parameters
     |      ----------
     |      * `imageFileFormat` :  
     |          File format to save the image in.  
     |      * `filename` :  
     |          Name and path of the image.  
     |      * `pOptions` :  
     |          Additional options.  
     |      
     |      pre: The pixel type of the image to be saved must be a supported input format of
     |          the Pylon::CImageFormatConverter.  
     |      
     |      Throws an exception if the saving of the image fails.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PylonImageBase(IReusableImage)
     |  PylonImageBase(*args, **kwargs)
     |  
     |  Provides basic functionality for pylon image classes.  
     |  
     |  C++ includes: PylonImageBase.h
     |  
     |  Method resolution order:
     |      PylonImageBase
     |      IReusableImage
     |      Image
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  CanSaveWithoutConversion(self, imageFileFormat: 'Pylon::EImageFileFormat') -> 'bool'
     |      Can be used to check whether the image can be saved without prior conversion.  
     |      
     |      This is a convenience method that calls
     |      CImagePersistence::CanSaveWithoutConversion().  
     |      
     |      Parameters
     |      ----------
     |      * `imageFileFormat` :  
     |          Target file format for the image to be saved.  
     |      
     |      Returns
     |      -------
     |      Returns true, if the image can be saved without prior conversion.  
     |      
     |      Does not throw C++ exceptions.
     |  
     |  GetPixelData(self, posX: 'uint32_t', posY: 'uint32_t') -> 'SPixelData'
     |      Retrieves the data of a pixel.  
     |      
     |      note: This method is relativly slow. Do not use it for image processing tasks.  
     |      
     |      Parameters
     |      ----------
     |      * `posX` :  
     |          Horizontal position of the pixel. The first column has position 0.  
     |      * `posY` :  
     |          Vertical position of the pixel. The first row has position 0.  
     |      
     |      Returns
     |      -------
     |      Returns the data of a pixel for supported pixel types. For unsupported pixel
     |      types pixel data of the SPixelData::PixelDataType_Unknown type is returned.  
     |      
     |      pre:  
     |      
     |          *   The image must be valid.  
     |          *   The pixel position defined by `posX` and `posY` must be located inside
     |              the image area.  
     |      
     |      Supported pixel types:  
     |      
     |      *   PixelType_Mono1packed  
     |      *   PixelType_Mono2packed  
     |      *   PixelType_Mono4packed  
     |      *   PixelType_Mono8  
     |      *   PixelType_Mono8signed  
     |      *   PixelType_Mono10  
     |      *   PixelType_Mono10packed  
     |      *   PixelType_Mono10p  
     |      *   PixelType_Mono12  
     |      *   PixelType_Mono12packed  
     |      *   PixelType_Mono12p  
     |      *   PixelType_Mono16  
     |      
     |      *   PixelType_BayerGR8  
     |      *   PixelType_BayerRG8  
     |      *   PixelType_BayerGB8  
     |      *   PixelType_BayerBG8  
     |      *   PixelType_BayerGR10  
     |      *   PixelType_BayerRG10  
     |      *   PixelType_BayerGB10  
     |      *   PixelType_BayerBG10  
     |      *   PixelType_BayerGR12  
     |      *   PixelType_BayerRG12  
     |      *   PixelType_BayerGB12  
     |      *   PixelType_BayerBG12  
     |      *   PixelType_BayerGR12Packed  
     |      *   PixelType_BayerRG12Packed  
     |      *   PixelType_BayerGB12Packed  
     |      *   PixelType_BayerBG12Packed  
     |      *   PixelType_BayerGR10p  
     |      *   PixelType_BayerRG10p  
     |      *   PixelType_BayerGB10p  
     |      *   PixelType_BayerBG10p  
     |      *   PixelType_BayerGR12p  
     |      *   PixelType_BayerRG12p  
     |      *   PixelType_BayerGB12p  
     |      *   PixelType_BayerBG12p  
     |      *   PixelType_BayerGR16  
     |      *   PixelType_BayerRG16  
     |      *   PixelType_BayerGB16  
     |      *   PixelType_BayerBG16  
     |      
     |      *   PixelType_RGB8packed  
     |      *   PixelType_BGR8packed  
     |      *   PixelType_RGBA8packed  
     |      *   PixelType_BGRA8packed  
     |      *   PixelType_RGB10packed  
     |      *   PixelType_BGR10packed  
     |      *   PixelType_RGB12packed  
     |      *   PixelType_BGR12packed  
     |      *   PixelType_RGB12V1packed  
     |      *   PixelType_RGB16packed  
     |      *   PixelType_RGB8planar  
     |      *   PixelType_RGB10planar  
     |      *   PixelType_RGB12planar  
     |      *   PixelType_RGB16planar  
     |      
     |      *   PixelType_YUV422packed  
     |      *   PixelType_YUV422_YUYV_Packed  
     |      
     |      Throws an exception, if the preconditions are not met.
     |  
     |  Load(self, filename: 'Pylon::String_t const &') -> 'void'
     |      Loads an image from a disk.  
     |      
     |      This is a convenience method that calls CImagePersistence::Load()  
     |      
     |      Parameters
     |      ----------
     |      * `filename` :  
     |          Name and path of the image.  
     |      
     |      pre: The image object must be able to hold the image format of the loaded image.  
     |      
     |      Throws an exception if the image cannot be loaded. The image buffer content is
     |      undefined when the loading of the image fails.
     |  
     |  Save(self, imageFileFormat: 'Pylon::EImageFileFormat', filename: 'Pylon::String_t const &', pOptions: 'ImagePersistenceOptions' = None) -> 'void'
     |      Saves the image to disk. Converts the image to a format that can be saved if
     |      required.  
     |      
     |      This is a convenience method that calls CImagePersistence::Save().  
     |      
     |      If required, the image is automatically converted into a new image and saved
     |      afterwards. See CImagePersistence::CanSaveWithoutConversion() for more
     |      information. An image with a bit depth higher than 8 bit is stored with 16 bit
     |      bit depth, if supported by the image file format. In this case the pixel data is
     |      MSB aligned.  
     |      
     |      If more control over the conversion is required, the CImageFormatConverter class
     |      can be used to convert the input image before saving it.  
     |      
     |      Parameters
     |      ----------
     |      * `imageFileFormat` :  
     |          File format to save the image in.  
     |      * `filename` :  
     |          Name and path of the image.  
     |      * `pOptions` :  
     |          Additional options.  
     |      
     |      pre: The pixel type of the image to be saved must be a supported input format of
     |          the Pylon::CImageFormatConverter.  
     |      
     |      Throws an exception if the saving of the image fails.
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IReusableImage:
     |  
     |  IsAdditionalPaddingSupported(self) -> 'bool'
     |  
     |  IsSupportedPixelType(self, pixelType: 'Pylon::EPixelType') -> 'bool'
     |  
     |  Release(self) -> 'void'
     |  
     |  Reset(self, *args) -> 'void'
     |  
     |  __del__ lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from IReusableImage:
     |  
     |  __swig_destroy__ = delete_IReusableImage(...)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |  
     |  GetBuffer(self) -> 'void *'
     |  
     |  GetHeight(self) -> 'uint32_t'
     |  
     |  GetImageSize(self) -> 'size_t'
     |  
     |  GetOrientation(self) -> 'Pylon::EImageOrientation'
     |  
     |  GetPaddingX(self) -> 'size_t'
     |  
     |  GetPixelType(self) -> 'Pylon::EPixelType'
     |  
     |  GetStride(self, strideBytes: 'size_t &') -> 'bool'
     |  
     |  GetWidth(self) -> 'uint32_t'
     |  
     |  IsUnique(self) -> 'bool'
     |  
     |  IsValid(self) -> 'bool'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PylonImageWindow(builtins.object)
     |  Methods defined here:
     |  
     |  Attach(self, winIndex: 'size_t') -> 'void'
     |  
     |  Close(self) -> 'bool'
     |  
     |  Create(self, *args) -> 'void'
     |  
     |  Detach(self) -> 'size_t'
     |  
     |  GetWindowHandle(self) -> 'HWND'
     |  
     |  GetWindowIndex(self) -> 'size_t'
     |  
     |  Hide(self) -> 'void'
     |  
     |  IsValid(self) -> 'bool'
     |  
     |  IsVisible(self)
     |      Checks if this PylonImageWindow is visible
     |      
     |      Returns
     |      -------
     |      True if visible.
     |  
     |  SetImage(self, image: 'GrabResult') -> 'void'
     |  
     |  Show(self, *args) -> 'void'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_PylonImageWindow(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  showDefault = 5
     |  
     |  useDefault = -2147483648
    
    class RuntimeException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      RuntimeException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class SoftwareTriggerConfiguration(ConfigurationEventHandler)
     |  Changes the configuration of the camera so that the acquisition of frames is
     |  triggered by software trigger. Use together with
     |  CInstantCamera::WaitForFrameTriggerReady() and
     |  CInstantCamera::ExecuteSoftwareTrigger().  
     |  
     |  The CSoftwareTriggerConfiguration is provided as header-only file. The code can
     |  be copied and modified for creating own configuration classes.  
     |  
     |  C++ includes: SoftwareTriggerConfiguration.h
     |  
     |  Method resolution order:
     |      SoftwareTriggerConfiguration
     |      ConfigurationEventHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  OnOpened(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |      Copy.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ApplyConfiguration(nodemap: 'INodeMap') -> 'void'
     |      Apply software trigger configuration.
     |  
     |  __swig_destroy__ = delete_SoftwareTriggerConfiguration(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ConfigurationEventHandler:
     |  
     |  DestroyConfiguration(self) -> 'void'
     |      Destroys the configuration event handler.  
     |      
     |      C++ exceptions from this call will be caught and ignored.
     |  
     |  OnAttach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a Pylon Device (Pylon::IPylonDevice) is attached by
     |      calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnAttached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a Pylon Device (Pylon::IPylonDevice) has been
     |      attached by calling the Instant Camera object's Attach() method.  
     |      
     |      This method can not be used for detecting that a camera device has been attached
     |      to the PC. The camera's Attach() method must not be called from here or from
     |      subsequent calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnCameraDeviceRemoved(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when a camera device removal from the PC has been
     |      detected.  
     |      
     |      The Pylon Device attached to the Instant Camera is not operable after this
     |      event. After it is made sure that no access to the Pylon Device or any of its
     |      node maps is made anymore the Pylon Device should be destroyed using
     |      InstantCamera::DeviceDestroy(). The access to the Pylon Device can be protected
     |      using the lock provided by GetLock(), e.g. when accessing parameters.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object from an additional
     |      thread.
     |  
     |  OnClose(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is closed.  
     |      
     |      Camera Close must not be called from here or from subsequent calls to avoid
     |      infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnClosed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been closed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnConfigurationDeregistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been
     |      deregistered.  
     |      
     |      The configuration event handler is automatically deregistered when the Instant
     |      Camera object is destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored.  This method is called
     |      inside the lock of the camera object.
     |  
     |  OnConfigurationRegistered(self, camera: 'InstantCamera') -> 'void'
     |      This method is called when the configuration event handler has been registered.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through.  This method is called inside
     |      the lock of the camera object.
     |  
     |  OnDestroy(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is destroyed.  
     |      
     |      Camera DestroyDevice must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDestroyed(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been destroyed.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetach(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is detached from the
     |      Instant Camera object.  
     |      
     |      The camera's Detach() method must not be called from here or from subsequent
     |      calls to avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnDetached(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after the attached Pylon Device has been detached from the
     |      Instant Camera object.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabError(self, camera: 'InstantCamera', errorMessage: 'char const *') -> 'void'
     |      This method is called when an exception has been triggered during grabbing.  
     |      
     |      An exception has been triggered by a grab thread. The grab will be stopped after
     |      this event call.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      * `errorMessage` :  
     |          The message of the exception that signaled an error during grabbing.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStart(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is started.  
     |      
     |      Camera StartGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStarted(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been started.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStop(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before a grab session is stopped.  
     |      
     |      Camera StopGrabbing must not be called from here or from subsequent calls to
     |      avoid infinite recursion.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnGrabStopped(self, camera: 'InstantCamera') -> 'void'
     |      This method is called after a grab session has been stopped.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      C++ exceptions from this call will be caught and ignored. All event handlers are
     |      notified.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  OnOpen(self, camera: 'InstantCamera') -> 'void'
     |      This method is called before the attached Pylon Device is opened.  
     |      
     |      Parameters
     |      ----------
     |      * `camera` :  
     |          The source of the call.  
     |      
     |      Exceptions from this call will propagate through. The notification of event
     |      handlers stops when an exception is triggered.  
     |      
     |      This method is called inside the lock of the camera object.
     |  
     |  __disown__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigurationEventHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TimeoutException(GenericException)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      TimeoutException
     |      GenericException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from GenericException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class TlFactory(builtins.object)
     |  TlFactory(*args, **kwargs)
     |  
     |  the Transport Layer Factory  
     |  
     |  Creates, Destroys and Enumerates transport layers as well as their devices.  
     |  
     |  C++ includes: TlFactory.h
     |  
     |  Methods defined here:
     |  
     |  CreateDevice(self, *args) -> 'Pylon::IPylonDevice *'
     |      This method is deprecated. Use CreateDevice receiving a CDeviceInfo object
     |      containing the full name as property. example: IPylonDevice* device =
     |      TlFactory.CreateDevice( CDeviceInfo().SetFullName( fullname)); creates a device
     |      by its unique name (i.e. fullname)
     |  
     |  CreateFirstDevice(self, *args) -> 'Pylon::IPylonDevice *'
     |      creates first found device from a device info object, injecting additional
     |      GenICam XML definition strings
     |  
     |  CreateTl(self, *args) -> 'Pylon::ITransportLayer *'
     |      Create a transport layer object specified by the transport layer's device class
     |      identifier.
     |  
     |  DestroyDevice(self, arg2: 'Pylon::IPylonDevice *') -> 'void'
     |      destroys a device
     |  
     |  EnumerateDevices(self, *args) -> 'int'
     |      returns a list of available devices that match the filter, see IDeviceFactory
     |      for more information
     |  
     |  EnumerateTls(self) -> 'int'
     |      Retrieve a list of available transport layers.
     |  
     |  IsDeviceAccessible(self, *args) -> 'bool'
     |  
     |  ReleaseTl(self, arg2: 'TransportLayer') -> 'void'
     |      Destroys a transport layer object.
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetInstance() -> 'Pylon::CTlFactory &'
     |      Retrieve the transport layer factory singleton. Throws an exception when
     |      Pylon::PylonInitialize() has not been called before.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class TlInfo(CInfoBase)
     |  Class used for storing the result of the transport layer enumeration process.  
     |  
     |  Enumerating the available Transport Layer objects returns a list of CTlInfo
     |  objects (Pylon::TlInfoList_t). A CTlInfo object holds information about the
     |  enumerated transport layer.  
     |  
     |  C++ includes: TlInfo.h
     |  
     |  Method resolution order:
     |      TlInfo
     |      CInfoBase
     |      IProperties
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __del__ lambda self
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_TlInfo(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  thisown
     |      The membership flag
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CInfoBase:
     |  
     |  GetDeviceClass(self) -> 'Pylon::String_t'
     |      Retrieves the device class device, e.g. Basler1394. This property is identified
     |      by Key::DeviceClassKey.
     |  
     |  GetFriendlyName(self) -> 'Pylon::String_t'
     |      Retrieves the human readable name of the device. This property is identified by
     |      Key::FriendlyNameKey.
     |  
     |  GetFullName(self) -> 'Pylon::String_t'
     |      Retrieves the full name identifying the device. This property is identified by
     |      Key::FullNameKey.
     |  
     |  GetPropertyAvailable(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetPropertyNames(self) -> 'int'
     |  
     |  GetPropertyValue(self, Name: 'Pylon::String_t const &') -> 'bool'
     |  
     |  GetVendorName(self) -> 'Pylon::String_t'
     |      Retrieves the vendor name of the device. This property is identified by
     |      Key::VendorNameKey.
     |  
     |  IsDeviceClassAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFriendlyNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsFullNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  IsSubset(self, Subset: 'IProperties') -> 'bool'
     |  
     |  IsUserProvided(self) -> 'bool'
     |  
     |  IsVendorNameAvailable(self) -> 'bool'
     |      Returns true if the above property is available.
     |  
     |  SetDeviceClass(self, DeviceClassValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  SetFriendlyName(self, FriendlyNameValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  SetFullName(self, FullNameValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  SetPropertyValue(self, Name: 'Pylon::String_t const &', Value: 'Pylon::String_t const &') -> 'Pylon::IProperties &'
     |  
     |  SetVendorName(self, VendorNameValue: 'Pylon::String_t const &') -> 'Pylon::CInfoBase &'
     |      Sets the above property.
     |  
     |  __eq__(self, rhs: 'CInfoBase') -> 'bool'
     |      Return self==value.
     |  
     |  __lt__(self, rhs: 'CInfoBase') -> 'bool'
     |      Return self<value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from CInfoBase:
     |  
     |  GetPropertyNotAvailable() -> 'char const *'
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from CInfoBase:
     |  
     |  PropertyNotAvailable = 'N/A'
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from IProperties:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TransportLayer(builtins.object)
     |  TransportLayer(*args, **kwargs)
     |  
     |  Methods defined here:
     |  
     |  CreateDeviceInfo(self) -> 'Pylon::CDeviceInfo'
     |  
     |  EnumerateInterfaces(self, list: 'Pylon::InterfaceInfoList_t &', addToList: 'bool' = False) -> 'int'
     |  
     |  GetNodeMap(self) -> 'GENAPI_NAMESPACE::INodeMap *'
     |  
     |  GetTlInfo(self) -> 'Pylon::CTlInfo'
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_TransportLayer(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  NodeMap
     |  
     |  TlInfo
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class WaitObject(builtins.object)
     |  WaitObject(*args)
     |  
     |  A platform independent wait object.  
     |  
     |  Wait objects are used by the Pylon::IStreamGrabber and Pylon::IEventGrabber
     |  interfaces to provide a platform independent mechanism for allowing an
     |  application to wait for data buffers to be filled.  
     |  
     |  For the Windows version of pylon, WaitObjects are wrappers for Win32 objects
     |  that can be used with `WaitForSingleObject()` and `WaitForMultipleObjects()`.  
     |  
     |  For the Linux version of pylon, WaitObjects are implemented based on file
     |  descriptors. The wait operation is implemented using the `poll()` function.  
     |  
     |  Although the class provides a default constructor, the default constructor
     |  doesn't create a "usable" wait objects wrapping a handle resp. file
     |  descriptor. Valid instances of Pylon::WaitObject cannot be created by the
     |  application, instead the pylon libraries return fully created wait objects. The
     |  Pylon::WaitObjectEx class can be used to create wait objects that can be
     |  controlled by the application.  
     |  
     |  The Pylon::WaitObject class provides access to the wrapped handle resp. file
     |  descriptor. This allows to use to allow use pylon wait objects as input for
     |  "native" APIs like `WaitForMultipleObjects()` (Windows), and `poll()` (Linux).  
     |  
     |  Multiple Pylon::WaitObjects can be put in the Pylon::WaitObjects container class
     |  allowing to wait "simultaneously" for multiple events.  
     |  
     |  C++ includes: WaitObject.h
     |  
     |  Methods defined here:
     |  
     |  IsValid(self) -> 'bool'
     |      Checks if the wait object is valid.  
     |      
     |      Don't call the Wait methods() for an invalid wait object. Wait objects returned
     |      by the pylon libraries are valid.  
     |      
     |      Returns
     |      -------
     |      true if the object contains a valid handle/file descriptor
     |  
     |  Wait(self, timeout: 'unsigned int') -> 'bool'
     |      Wait for the object to be signaled.  
     |      
     |      Parameters
     |      ----------
     |      * `timeout` :  
     |          timeout in ms  
     |      
     |      Returns
     |      -------
     |      false when the timeout has been expired, true when the waiting was successful
     |      before the timeout has been expired.
     |  
     |  WaitEx(self, timeout: 'unsigned int', bAlertable: 'bool') -> 'Pylon::EWaitExResult'
     |      Wait for the object to be signaled (interruptible).  
     |      
     |      Parameters
     |      ----------
     |      * `timeout` :  
     |          timeout in ms  
     |      * `bAlertable` :  
     |          When the bAlertable parameter is set to true, the function waits until
     |          either the timeout elapses, the object enters the signaled state, or the
     |          wait operation has been interrupted. For Windows, the wait operation is
     |          interrupted by queued APCs or I/O completion routines. For Linux, the wait
     |          operation can be interrupted by signals.  
     |      
     |      Returns
     |      -------
     |      The returned Pylon::EWaitExResult value indicates the result of the wait
     |      operation.
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args)
     |      Constructor taking existing handle (duplicate=false -> take ownership like
     |      std:auto_ptr).  
     |      
     |      This method allows to wrap an existing windows handle that can be used with the
     |      `WaitForSingleObject()` and `WaitForMultipleObjects` methods.
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Sleep(ms: 'unsigned long') -> 'void'
     |      Suspend calling thread for specified time.  
     |      
     |      Parameters
     |      ----------
     |      * `ms` :  
     |          wait time in ms
     |  
     |  __swig_destroy__ = delete_WaitObject(...)
     |      Destructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag
    
    class WaitObjects(builtins.object)
     |  WaitObjects(*args)
     |  
     |  A set of wait objects.  
     |  
     |  C++ includes: WaitObjects.h
     |  
     |  Methods defined here:
     |  
     |  Add(self, o: 'WaitObject') -> 'unsigned int'
     |      Add an object to wait on and return the index of the added object.  
     |      
     |      Calling Add from another thread during wait operations will cause undefined
     |      behaviour.
     |  
     |  RemoveAll(self) -> 'void'
     |      Removes all added wait objects.  
     |      
     |      Calling RemoveAll from another thread during wait operations will cause
     |      undefined behaviour.
     |  
     |  WaitForAll(self, timeout: 'unsigned int') -> 'bool'
     |      Wait for all objects to get signaled.  
     |      
     |      Parameters
     |      ----------
     |      * `timeout` :  
     |          maximum wait period in milliseconds  
     |      
     |      Returns
     |      -------
     |      true if all objects were signaled
     |  
     |  WaitForAllEx(self, timeout: 'unsigned int', bAlertable: 'bool') -> 'Pylon::EWaitExResult'
     |      Wait for all objects to get signaled.  
     |      
     |      Parameters
     |      ----------
     |      * `bAlertable` :  
     |          If true, the wait operation can be interrupted (Windows: APC; UNIX: signal)  
     |      * `timeout` :  
     |          maximum wait period in milliseconds
     |  
     |  WaitForAny(self, timeout: 'unsigned int', pIndex: 'unsigned int *' = None) -> 'bool'
     |      Wait for any one object to get signaled.  
     |      
     |      Parameters
     |      ----------
     |      * `timeout` :  
     |          maximum wait period in milliseconds  
     |      * `*pIndex` :  
     |          (optional) pointer to buffer taking the index of the signaled object  
     |      
     |      Returns
     |      -------
     |      true if any object was signaled.
     |  
     |  WaitForAnyEx(self, timeout: 'unsigned int', bAlertable: 'bool', pIndex: 'unsigned int *' = None) -> 'Pylon::EWaitExResult'
     |      Wait for any one object to get signaled.  
     |      
     |      Parameters
     |      ----------
     |      * `timeout` :  
     |          maximum wait period in milliseconds  
     |      * `bAlertable` :  
     |          If true, the wait operation can be interrupted (Windows: APC; UNIX: signal)  
     |      * `*pIndex` :  
     |          (optional) pointer to buffer taking the index of the signaled object
     |  
     |  __del__ lambda self
     |  
     |  __init__(self, *args)
     |      copy constructor
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __swig_destroy__ = delete_WaitObjects(...)
     |      destructor
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  thisown
     |      The membership flag

FUNCTIONS
    AcquireContinuousConfiguration_ApplyConfiguration(nodemap: 'INodeMap') -> 'void'
        Apply acquire continuous configuration.
    
    AcquireContinuousConfiguration_swigregister(...)
    
    AcquireSingleFrameConfiguration_ApplyConfiguration(nodemap: 'INodeMap') -> 'void'
        Apply acquire single frame configuration.
    
    AcquireSingleFrameConfiguration_swigregister(...)
    
    BitDepth(...)
    
    BitPerPixel(...)
    
    CInfoBase_GetPropertyNotAvailable() -> 'char const *'
    
    CInfoBase_swigregister(...)
    
    CameraEventHandler_swigregister(...)
    
    ComputeBufferSize(...)
    
    ComputePaddingX(...)
    
    ComputeStride(...)
    
    ConfigurationEventHandler_swigregister(...)
    
    DeviceInfo_swigregister(...)
    
    DisplayImage(...)
    
    FeaturePersistence_Load(FileName: 'Pylon::String_t const &', pNodeMap: 'INodeMap', validate: 'bool' = True) -> 'GENICAM_NAMESPACE::gcstring const &'
        Loads the features from the file to the node map.  
        
        Parameters
        ----------
        * `FileName` :  
            Name of the file that contains the node map values.  
        * `pNodeMap` :  
            Pointer to the node map  
        * `validate` :  
            If validate==true, all node values will be validated. In case of an error, a
            GenICam::RuntimeException will be thrown  
        
        Throws an exception if loading fails.
    
    FeaturePersistence_LoadFromString(Features: 'Pylon::String_t const &', pNodeMap: 'INodeMap', validate: 'bool' = True) -> 'GENICAM_NAMESPACE::gcstring const &'
        Loads the features from the string to the node map.  
        
        Parameters
        ----------
        * `Features` :  
            String containing the node map values.  
        * `pNodeMap` :  
            Pointer to the node map.  
        * `validate` :  
            If validate==true, all node values will be validated. In case of an error, a
            GenICam::RuntimeException will be thrown.  
        
        Throws an exception if loading fails.
    
    FeaturePersistence_Save(FileName: 'Pylon::String_t const &', pNodeMap: 'INodeMap') -> 'GENICAM_NAMESPACE::gcstring const &'
        Saves the node map to the file.  
        
        Sequence sets of a camera are automatically saved if SequenceEnable or
        SequencerConfigurationMode is enabled.  
        
        Parameters
        ----------
        * `FileName` :  
            Name of the file that contains the node map values  
        * `pNodeMap` :  
            Pointer to the node map  
        
        Throws an exception if saving fails.
    
    FeaturePersistence_SaveToString(pNodeMap: 'INodeMap') -> 'GENICAM_NAMESPACE::gcstring &'
        Saves the node map to the string. Sequence sets of a camera are automatically
        saved, if SequenceEnable or SequencerConfigurationMode is enabled.  
        
        Parameters
        ----------
        * `Features` :  
            String containing the node map values  
        * `pNodeMap` :  
            Pointer to the node map  
        
        Throws an exception if saving fails.
    
    FeaturePersistence_swigregister(...)
    
    GetPixelColorFilter(...)
    
    GetPixelIncrementX(...)
    
    GetPixelIncrementY(...)
    
    GetPixelTypesForUnpacking(...)
    
    GetPlanePixelType(...)
    
    GetPylonVersion(...)
    
    GetPylonVersionString(...)
    
    GrabResultData_swigregister(...)
    
    GrabResult_swigregister(...)
    
    HasAlpha(...)
    
    IProperties_swigregister(...)
    
    IReusableImage_swigregister(...)
    
    ImageEventHandler_swigregister(...)
    
    ImageFormatConverterParams_Params_swigregister(...)
    
    ImageFormatConverter_IsSupportedInputFormat(sourcePixelType: 'Pylon::EPixelType') -> 'bool'
        Returns true if the image format defined by the given pixel type is a supported
        input format.  
        
        Parameters
        ----------
        * `sourcePixelType` :  
            The pixel type of the source image.  
        
        Does not throw C++ exceptions.
    
    ImageFormatConverter_IsSupportedOutputFormat(destinationPixelType: 'Pylon::EPixelType') -> 'bool'
        Returns true if the image format defined by the given pixel type is a supported
        output format.  
        
        Parameters
        ----------
        * `destinationPixelType` :  
            The pixel type of the destination image.  
        
        Does not throw C++ exceptions.
    
    ImageFormatConverter_swigregister(...)
    
    ImagePersistenceOptions_swigregister(...)
    
    Image_swigregister(...)
    
    InstantCameraArray_swigregister(...)
    
    InstantCameraParams_Params_swigregister(...)
    
    InstantCamera_swigregister(...)
    
    IsBGR(...)
    
    IsBGRA(...)
    
    IsBGRPacked(...)
    
    IsBayer(...)
    
    IsBayerPacked(...)
    
    IsColorImage(...)
    
    IsMono(...)
    
    IsMonoImage(...)
    
    IsMonoPacked(...)
    
    IsPacked(...)
    
    IsPackedInLsbFormat(...)
    
    IsPlanar(...)
    
    IsRGB(...)
    
    IsRGBA(...)
    
    IsRGBPacked(...)
    
    IsYUV(...)
    
    PlaneCount(...)
    
    PylonImageBase_swigregister(...)
    
    PylonImageWindow_swigregister(...)
    
    PylonImage_Create(*args) -> 'Pylon::CPylonImage'
        Creates an image and allocates a buffer for it.  
        
        Parameters
        ----------
        * `pixelType` :  
            The pixel type of the new image.  
        * `width` :  
            The number of pixels in a row in the new image.  
        * `height` :  
            The number of rows in the new image.  
        * `paddingX` :  
            The number of extra data bytes at the end of each row.  
        * `orientation` :  
            The vertical orientation of the image in the image buffer.  
        
        pre:  
        
            *   The pixel type must be valid.  
            *   The `width` value must be >= 0 and < _I32_MAX.  
            *   The `height` value must be >= 0 and < _I32_MAX.  
        
        Throws an exception when the parameters are invalid. Throws an exception when no
        buffer with the required size could be allocated.
    
    PylonImage_swigregister(...)
    
    SamplesPerPixel(...)
    
    SoftwareTriggerConfiguration_ApplyConfiguration(nodemap: 'INodeMap') -> 'void'
        Apply software trigger configuration.
    
    SoftwareTriggerConfiguration_swigregister(...)
    
    TlFactory_GetInstance() -> 'Pylon::CTlFactory &'
        Retrieve the transport layer factory singleton. Throws an exception when
        Pylon::PylonInitialize() has not been called before.
    
    TlFactory_swigregister(...)
    
    TlInfo_swigregister(...)
    
    TransportLayer_swigregister(...)
    
    WaitObject_Sleep(ms: 'unsigned long') -> 'void'
        Suspend calling thread for specified time.  
        
        Parameters
        ----------
        * `ms` :  
            wait time in ms
    
    WaitObject_swigregister(...)
    
    WaitObjects_swigregister(...)
    
    needs_numpy(func)
    
    weakref_proxy = proxy(...)
        proxy(object[, callback]) -- create a proxy object that weakly
        references 'object'.  'callback', if given, is called with a
        reference to the proxy when 'object' is about to be finalized.

DATA
    Accessibility_NotReachable = 4
    Accessibility_Ok = 1
    Accessibility_Opened = 2
    Accessibility_OpenedExclusively = 3
    Accessibility_Unknown = 0
    AddressKey = 'Address'
    CameraEventAvailability_Mandatory = 0
    CameraEventAvailability_Optional = 1
    Cleanup_Delete = 1
    Cleanup_None = 0
    DefaultGatewayKey = 'DefaultGateway'
    DeviceClassKey = 'DeviceClass'
    DeviceFactoryKey = 'DeviceFactory'
    DeviceIDKey = 'DeviceID'
    DeviceSpecificStringKey = 'DeviceSpecificString'
    DeviceVersionKey = 'DeviceVersion'
    DeviceXMLFileOverrideKey = 'DeviceXMLFileOverride'
    FriendlyNameKey = 'FriendlyName'
    FullNameKey = 'FullName'
    GCC_DIAGNOSTIC_AWARE = 0
    GrabLoop_ProvidedByInstantCamera = 0
    GrabLoop_ProvidedByUser = 1
    GrabStrategy_LatestImageOnly = 1
    GrabStrategy_LatestImages = 2
    GrabStrategy_OneByOne = 0
    GrabStrategy_UpcomingImage = 3
    ImageFileFormat_Bmp = 0
    ImageFileFormat_Jpeg = 2
    ImageFileFormat_Png = 3
    ImageFileFormat_Raw = 4
    ImageFileFormat_Tiff = 1
    ImageOrientation_BottomUp = 1
    ImageOrientation_TopDown = 0
    InconvertibleEdgeHandling_Clip = 1
    InconvertibleEdgeHandling_Extend = 2
    InconvertibleEdgeHandling_SetZero = 0
    InitialBaudRateKey = 'InitialBaudRate'
    InterfaceKey = 'Interface'
    InternalNameKey = 'InternalName'
    IpAddressKey = 'IpAddress'
    IpConfigCurrentKey = 'IpConfigCurrent'
    IpConfigOptionsKey = 'IpConfigOptions'
    MacAddressKey = 'MacAddress'
    ModelNameKey = 'ModelName'
    MonoConversionMethod_Gamma = 0
    MonoConversionMethod_Truncate = 1
    OutputBitAlignment_LsbAligned = 0
    OutputBitAlignment_MsbAligned = 1
    OutputOrientation_BottomUp = 2
    OutputOrientation_TopDown = 1
    OutputOrientation_Unchanged = 0
    Ownership_ExternalOwnership = 0
    Ownership_TakeOwnership = 1
    PCF_BayerBG = 3
    PCF_BayerGB = 1
    PCF_BayerGR = 2
    PCF_BayerRG = 0
    PCF_Undefined = 4
    PIXEL_COLOR = 33554432
    PIXEL_CUSTOMTYPE = -2147483648
    PIXEL_MONO = 16777216
    PS_Undefined = -1
    PayloadType_ChunkData = 3
    PayloadType_DeviceSpecific = 32768
    PayloadType_File = 2
    PayloadType_Image = 0
    PayloadType_RawData = 1
    PayloadType_Undefined = -1
    PixelType_BGR10V1packed = 35651612
    PixelType_BGR10V2packed = 35651613
    PixelType_BGR10packed = 36700185
    PixelType_BGR12packed = 36700187
    PixelType_BGR8packed = 35127317
    PixelType_BGRA8packed = 35651607
    PixelType_BayerBG10 = 17825807
    PixelType_BayerBG10p = 17432658
    PixelType_BayerBG12 = 17825811
    PixelType_BayerBG12Packed = 17563693
    PixelType_BayerBG12p = 17563731
    PixelType_BayerBG16 = 17825841
    PixelType_BayerBG8 = 17301515
    PixelType_BayerGB10 = 17825806
    PixelType_BayerGB10p = 17432660
    PixelType_BayerGB12 = 17825810
    PixelType_BayerGB12Packed = 17563692
    PixelType_BayerGB12p = 17563733
    PixelType_BayerGB16 = 17825840
    PixelType_BayerGB8 = 17301514
    PixelType_BayerGR10 = 17825804
    PixelType_BayerGR10p = 17432662
    PixelType_BayerGR12 = 17825808
    PixelType_BayerGR12Packed = 17563690
    PixelType_BayerGR12p = 17563735
    PixelType_BayerGR16 = 17825838
    PixelType_BayerGR8 = 17301512
    PixelType_BayerRG10 = 17825805
    PixelType_BayerRG10p = 17432664
    PixelType_BayerRG12 = 17825809
    PixelType_BayerRG12Packed = 17563691
    PixelType_BayerRG12p = 17563737
    PixelType_BayerRG16 = 17825839
    PixelType_BayerRG8 = 17301513
    PixelType_Double = -2127560448
    PixelType_Mono10 = 17825795
    PixelType_Mono10p = 17432646
    PixelType_Mono10packed = 17563652
    PixelType_Mono12 = 17825797
    PixelType_Mono12p = 17563719
    PixelType_Mono12packed = 17563654
    PixelType_Mono16 = 17825799
    PixelType_Mono1packed = -2130640884
    PixelType_Mono2packed = -2130575347
    PixelType_Mono4packed = -2130444274
    PixelType_Mono8 = 17301505
    PixelType_Mono8signed = 17301506
    PixelType_RGB10packed = 36700184
    PixelType_RGB10planar = 36700194
    PixelType_RGB12V1packed = 35913780
    PixelType_RGB12packed = 36700186
    PixelType_RGB12planar = 36700195
    PixelType_RGB16packed = 36700211
    PixelType_RGB16planar = 36700196
    PixelType_RGB8packed = 35127316
    PixelType_RGB8planar = 35127329
    PixelType_RGBA8packed = 35651606
    PixelType_Undefined = -1
    PixelType_YCbCr420_8_YY_CbCr_Semiplanar = 34341138
    PixelType_YCbCr422_8_YY_CbCr_Semiplanar = 34603283
    PixelType_YUV411packed = 34340894
    PixelType_YUV420planar = -2113142720
    PixelType_YUV422_YUYV_Packed = 34603058
    PixelType_YUV422packed = 34603039
    PixelType_YUV422planar = -2112880574
    PixelType_YUV444packed = 35127328
    PixelType_YUV444planar = -2112356284
    PortIDKey = 'PortID'
    PortNrKey = 'PortNr'
    PortSpecificStringKey = 'PortSpecificString'
    RegistrationMode_Append = 0
    RegistrationMode_ReplaceAll = 1
    SerialNumberKey = 'SerialNumber'
    SubnetAddressKey = 'SubnetAddress'
    SubnetMaskKey = 'SubnetMask'
    TimeoutHandling_Return = 0
    TimeoutHandling_ThrowException = 1
    UserDefinedNameKey = 'UserDefinedName'
    VendorNameKey = 'VendorName'
    XMLSourceKey = 'XMLSource'
    cvar = <Swig global variables>
    waitForever = 4294967295
    waitex_abandoned = 2
    waitex_alerted = -1
    waitex_signaled = 1
    waitex_timeout = 0

VERSION
    1.4.0

FILE
    c:\users\ghile\anaconda3\envs\imagproc\lib\site-packages\pypylon\pylon.py


